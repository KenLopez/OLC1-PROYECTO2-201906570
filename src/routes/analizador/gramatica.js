/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,42],$V2=[1,51],$V3=[1,52],$V4=[1,53],$V5=[1,54],$V6=[1,55],$V7=[1,56],$V8=[1,57],$V9=[1,58],$Va=[1,20],$Vb=[1,19],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,31],$Vi=[1,23],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,37],$Vn=[1,25],$Vo=[1,38],$Vp=[1,41],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,49],$Vv=[1,50],$Vw=[5,27,28,32,33,34,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,76,77,84,91,98,99,100,101,102,103],$Vx=[1,63],$Vy=[1,62],$Vz=[49,50,71,82,83,85,86,87,88,90,91,92,93,94,95],$VA=[2,97],$VB=[2,126],$VC=[1,71],$VD=[2,122],$VE=[1,76],$VF=[1,73],$VG=[1,77],$VH=[1,74],$VI=[1,75],$VJ=[2,123],$VK=[1,78],$VL=[2,124],$VM=[1,79],$VN=[2,5,26,27,28,32,33,34,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,68,69,70,76,77,80,81,84,91,98,99,100,101,102,103],$VO=[1,86],$VP=[1,94],$VQ=[1,95],$VR=[1,89],$VS=[1,90],$VT=[1,91],$VU=[1,92],$VV=[1,93],$VW=[1,96],$VX=[1,97],$VY=[1,98],$VZ=[1,99],$V_=[1,100],$V$=[1,101],$V01=[1,102],$V11=[1,103],$V21=[30,41,44,50],$V31=[2,60],$V41=[1,109],$V51=[2,26,30,45,49,50,60,62,71,72,82,83,85,86,87,88,90,91,92,93,94,95],$V61=[2,5,26,27,28,32,33,34,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,68,69,70,75,76,77,80,81,84,91,98,99,100,101,102,103],$V71=[2,45],$V81=[1,123],$V91=[1,129],$Va1=[2,30,60],$Vb1=[1,146],$Vc1=[1,145],$Vd1=[1,158],$Ve1=[1,161],$Vf1=[1,162],$Vg1=[1,163],$Vh1=[1,166],$Vi1=[2,26,30,45,60,62,72,82,83],$Vj1=[2,26,30,45,49,50,60,62,72,82,83,85,86,87,88,90,91],$Vk1=[1,203],$Vl1=[26,30,62],$Vm1=[2,26,27,41,48,55,56,57,58,59,65,66,67,68,69,70,76,77,80,81],$Vn1=[2,26,30,45,60,62,72,82,83,85,86],$Vo1=[2,26,30,45,49,50,60,62,72,82,83,85,86,87,88],$Vp1=[2,26,30,45,49,50,60,62,72,82,83,85,86,87,88,90,91,92,93,94],$Vq1=[1,233],$Vr1=[2,26,30,42,45,49,50,60,62,71,72,82,83,85,86,87,88,90,91,92,93,94,95],$Vs1=[30,62],$Vt1=[1,261],$Vu1=[1,285],$Vv1=[26,80,81],$Vw1=[26,27,41,48,55,56,57,58,59,65,66,67,68,69,70,76,77,80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"GLOBALES":4,"EOF":5,"GLOBAL":6,"SYNC":7,"DECLARACION":8,"ASIGNACION":9,"FUNCION":10,"IF":11,"SWITCH":12,"WHILE":13,"DOWHILE":14,"FOR":15,"PRINT":16,"OPTERNARIO":17,"LLAMADA":18,"MAIN":19,"INSTRUCCIONES":20,"INSTRUCCION":21,"TRANSFERENCIA":22,"BLOQUE":23,"llavea":24,"BLOQUE2":25,"llavec":26,"print":27,"parena":28,"EXPRL":29,"parenc":30,"NATIVA":31,"minusculas":32,"mayusculas":33,"tamanio":34,"truncar":35,"redondear":36,"typeOf":37,"acadena":38,"aarreglo":39,"TYPE":40,"id":41,"igual":42,"CASTEO":43,"corchetea":44,"corchetec":45,"nuevo":46,"LISTAVALORES":47,"tlista":48,"menor":49,"mayor":50,"incremento":51,"decremento":52,"ACCESOVECTOR":53,"ACCESOLISTA":54,"tint":55,"tstring":56,"tdouble":57,"tbool":58,"tchar":59,"ptcoma":60,"ex":61,"coma":62,"PARAM":63,"tmethod":64,"mientras":65,"has":66,"para":67,"retorno":68,"continuar":69,"romper":70,"interrog":71,"dospt":72,"IFSOLO":73,"ELSE":74,"sino":75,"si":76,"fswitch":77,"CASES":78,"DEFAULT":79,"caso":80,"defecto":81,"ologico":82,"ylogico":83,"exclamacion":84,"equals":85,"diferente":86,"mayorigual":87,"menorigual":88,"EXP2":89,"mas":90,"menos":91,"por":92,"dividido":93,"modulo":94,"elevado":95,"EXPVAL":96,"NUM":97,"cadena":98,"caracter":99,"vtrue":100,"vfalse":101,"entero":102,"decimal":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",24:"llavea",26:"llavec",27:"print",28:"parena",30:"parenc",32:"minusculas",33:"mayusculas",34:"tamanio",35:"truncar",36:"redondear",37:"typeOf",38:"acadena",39:"aarreglo",41:"id",42:"igual",44:"corchetea",45:"corchetec",46:"nuevo",48:"tlista",49:"menor",50:"mayor",51:"incremento",52:"decremento",55:"tint",56:"tstring",57:"tdouble",58:"tbool",59:"tchar",60:"ptcoma",61:"ex",62:"coma",64:"tmethod",65:"mientras",66:"has",67:"para",68:"retorno",69:"continuar",70:"romper",71:"interrog",72:"dospt",75:"sino",76:"si",77:"fswitch",80:"caso",81:"defecto",82:"ologico",83:"ylogico",84:"exclamacion",85:"equals",86:"diferente",87:"mayorigual",88:"menorigual",90:"mas",91:"menos",92:"por",93:"dividido",94:"modulo",95:"elevado",98:"cadena",99:"caracter",100:"vtrue",101:"vfalse",102:"entero",103:"decimal"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[20,2],[20,1],[20,2],[21,2],[21,2],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,2],[23,2],[25,2],[25,1],[25,2],[16,4],[16,3],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[8,2],[8,4],[8,4],[8,10],[8,8],[8,9],[43,4],[9,3],[9,3],[9,2],[9,2],[9,3],[9,3],[40,1],[40,1],[40,1],[40,1],[40,1],[53,4],[54,6],[7,1],[7,1],[19,2],[18,4],[18,3],[47,3],[47,1],[10,6],[10,5],[10,6],[10,5],[63,4],[63,2],[13,5],[14,7],[15,9],[15,9],[22,1],[22,1],[22,1],[17,5],[11,1],[11,2],[74,2],[74,2],[73,5],[12,7],[12,7],[12,8],[78,4],[78,3],[79,3],[29,1],[29,3],[29,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[89,3],[89,3],[89,3],[89,3],[89,3],[89,3],[89,1],[96,2],[96,3],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[97,1],[97,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:

      var p = program
      program = new Global()
      p.ejecutar()
      return p;
   
break;
case 3: case 4:
program.instrucciones.push($$[$0]);
break;
case 5: case 20: case 34: case 66:
program.newError(Type.SINTACTICO, "No se esperaba: " + this.$, this._$.first_line, this._$.first_column)
break;
case 9: case 24:
this.$ = new If($$[$0],this._$.first_line, this._$.first_column);
break;
case 11: case 12: case 107: case 114:
this.$ = $$[$0]
break;
case 21: case 22: case 23: case 29: case 30:
this.$ = $$[$0-1];
break;
case 25: case 26: case 27: case 28: case 89:
this.$ = $$[$0];
break;
case 31:
this.$= new Bloque($$[$0], this._$.first_line, this._$.first_column);
break;
case 32:
$$[$0].unshift($$[$0-1]); this.$ = $$[$0];
break;
case 33:
this.$=[];
break;
case 35:
this.$ = new Print($$[$0-1], null, Type.PRINT, this._$.first_line, this._$.first_column);
break;
case 36:
this.$ = new Print(null, null, Type.PRINT, this._$.first_line, this._$.first_column);
break;
case 45:
this.$ = new Declaracion($$[$0], null, $$[$0-1], Type.DECLARACION, this._$.first_line, this._$.first_column)
break;
case 46:
this.$ = new Declaracion($$[$0-2], $$[$0], $$[$0-3], Type.DECLARACION, this._$.first_line, this._$.first_column)
break;
case 52:
this.$ = new Asignacion($$[$0-2], $$[$0], Type.ASIGNACION, this._$.first_line, this._$.first_column)
break;
case 54:
this.$ = new Asignacion($$[$0-1], null, Type.INCREMENTO, this._$.first_line, this._$.first_column)
break;
case 55:
this.$ = new Asignacion($$[$0-1], null, Type.DECREMENTO, this._$.first_line, this._$.first_column)
break;
case 58:
this.$ = Type.INT;
break;
case 59:
this.$ = Type.STRING;
break;
case 60:
this.$ = Type.DOUBLE;
break;
case 61:
this.$ = Type.BOOLEAN;
break;
case 62:
this.$ = Type.CHAR;
break;
case 78:
this.$ = new While($$[$0-2], $$[$0], this._$.first_line, this._$.first_column)
break;
case 79:
this.$ = new DoWhile($$[$0-2], $$[$0-5], this._$.first_line, this._$.first_column)
break;
case 80: case 81:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],this._$.first_line, this._$.first_column)
break;
case 86:
this.$=$$[$0];
break;
case 87:
$$[$0-1].push(...$$[$0]);
break;
case 88:
this.$ = [{exp: null, block: $$[$0]}];
break;
case 90:
this.$ = [{exp: $$[$0-2], block: $$[$0]}];
break;
case 98:
this.$ = new Logica($$[$0-2], $$[$0], Type.OR, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 99:
this.$ = new Logica($$[$0-2], $$[$0], Type.AND, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 100:
this.$ = new Unitaria($$[$0], Type.NOT, Type.UNITARIA, this._$.first_line, this._$.first_column);
break;
case 101:
this.$ = new Logica($$[$0-2], $$[$0], Type.IGUAL, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 102:
this.$ = new Logica($$[$0-2], $$[$0], Type.DIFERENTE, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 103:
this.$ = new Logica($$[$0-2], $$[$0], Type.MENOR, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 104:
this.$ = new Logica($$[$0-2], $$[$0], Type.MAYOR, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 105:
this.$ = new Logica($$[$0-2], $$[$0], Type.MAYORIGUAL, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 106:
this.$ = new Logica($$[$0-2], $$[$0], Type.MENORIGUAL, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 108:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.SUMA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 109:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.RESTA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 110:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.MULTIPLICACION, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 111:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.DIVISION, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 112:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.MODULO, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 113:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.POTENCIA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 115:
this.$ = new Unitaria($$[$0], Type.NEGACION, Type.UNITARIA, this._$.first_line, this._$.first_column);
break;
case 116:
this.$ = $$[$0-1]
break;
case 117:
this.$ = new Value($$[$0].value, $$[$0].type, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 118:
this.$ = new Value(String($$[$0]), Type.STRING, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 119:
this.$ = new Value(String($$[$0]), Type.CHAR, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 120:
this.$ = new Value(true, Type.BOOLEAN, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 121:
this.$ = new Value(false, Type.BOOLEAN, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 122:
this.$ = new Symbol($$[$0], null, Type.SYMBOL, Type.VALOR, this._$.first_line, this._$.first_column );
break;
case 127:
this.$ = new Value(parseInt($$[$0]), Type.INT, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 128:
this.$ =new Value(parseFloat($$[$0]), Type.DOUBLE, Type.VALOR, this._$.first_line, this._$.first_column);
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,27:$V0,28:$V1,29:30,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:18,41:$Va,48:$Vb,53:21,54:22,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,73:24,76:$Vm,77:$Vn,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{1:[3]},{5:[1,59],6:60,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,27:$V0,28:$V1,29:30,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:18,41:$Va,48:$Vb,53:21,54:22,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,73:24,76:$Vm,77:$Vn,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{1:[2,2]},o($Vw,[2,4]),{2:$Vx,7:61,60:$Vy},{2:$Vx,7:64,60:$Vy},{2:$Vx,7:65,60:$Vy},o($Vw,[2,8]),o($Vw,[2,9]),o($Vw,[2,10]),o($Vw,[2,11]),o($Vw,[2,12]),o($Vw,[2,13]),{2:$Vx,7:66,60:$Vy},o($Vz,$VA,{7:67,2:$Vx,60:$Vy}),o($Vz,$VB,{7:68,2:$Vx,60:$Vy}),{2:$Vx,7:69,60:$Vy},{41:[1,70],44:$VC},{40:72,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($Vz,$VD,{28:$VE,42:$VF,44:$VG,51:$VH,52:$VI}),o($Vz,$VJ,{42:$VK}),o($Vz,$VL,{42:$VM}),{41:[1,80]},o($VN,[2,86],{74:81,75:[1,82]}),{28:[1,83]},{28:[1,84]},{23:85,24:$VO},{28:[1,87]},{28:[1,88]},{49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{18:104,41:[1,105]},o($V21,[2,58]),o($V21,[2,59]),o($V21,$V31),o($V21,[2,61]),o($V21,[2,62]),{28:[1,106]},{17:108,18:112,28:$V1,29:107,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($V51,[2,107]),o($V51,[2,114]),{17:108,18:112,28:$V1,29:113,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:114,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($V51,[2,117]),o($V51,[2,118]),o($V51,[2,119]),o($V51,[2,120]),o($V51,[2,121]),o($V51,[2,125]),o($V51,[2,127]),o($V51,[2,128]),{28:[1,115]},{28:[1,116]},{28:[1,117]},{28:[1,118]},{28:[1,119]},{28:[1,120]},{28:[1,121]},{28:[1,122]},{1:[2,1]},o($Vw,[2,3]),o($Vw,[2,5]),o($V61,[2,65]),o($V61,[2,66]),o($Vw,[2,6]),o($Vw,[2,7]),o($Vw,[2,14]),o($Vw,[2,15]),o($Vw,[2,16]),o($Vw,[2,17]),o($V31,$V71,{28:[1,124],42:$V81}),{45:[1,125]},{41:[1,126]},{17:108,18:112,28:$V91,29:127,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,43:128,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Va1,[2,54]),o($Va1,[2,55]),{17:108,18:112,28:$V1,29:132,30:[1,131],31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,47:130,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:133,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,44:[1,134],53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:135,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:136,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{28:[1,137]},o($VN,[2,87]),{11:139,23:138,24:$VO,73:24,76:$Vm},{17:108,18:112,28:$V1,29:140,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:141,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{65:[1,142]},{2:$Vb1,8:147,9:148,11:150,12:151,13:152,14:153,15:154,16:155,18:156,21:144,22:149,25:143,26:$Vc1,27:$V0,40:157,41:$Vd1,48:$Vb,53:159,54:160,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vj,66:$Vk,67:$Vl,68:$Ve1,69:$Vf1,70:$Vg1,73:24,76:$Vm,77:$Vn},{8:165,9:164,40:157,41:$Vh1,48:$Vb,53:159,54:160,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{17:108,18:112,28:$V1,29:167,30:[1,168],31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:169,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:170,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:171,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:172,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:173,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:174,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:175,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:176,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:177,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:178,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:179,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:180,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:181,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:182,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:183,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($V31,[2,67]),{28:$VE},{17:108,18:112,28:$V1,29:184,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Vi1,[2,100],{49:$VP,50:$VQ,71:$VR,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($V51,$VA),o($V51,$VD,{28:$VE,44:$VG}),o($V51,$VJ),o($V51,$VL),o($V51,$VB),o($Vj1,[2,115],{71:$VR,92:$V_,93:$V$,94:$V01,95:$V11}),{30:[1,185],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{17:108,18:112,28:$V1,29:186,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:187,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:188,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:189,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:190,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:191,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:192,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:193,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V91,29:194,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,43:195,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{30:[1,197],40:198,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:196},{41:[1,199]},{42:[1,200]},o($Va1,[2,52],{49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Va1,[2,53]),{17:108,18:112,28:$V1,29:114,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:201,41:$V41,53:110,54:111,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{30:[1,202],62:$Vk1},o($V51,[2,69]),o($Vl1,[2,71],{49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),{45:[1,204],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{17:108,18:112,28:$V1,29:205,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Va1,[2,56],{49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Va1,[2,57],{49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),{30:[1,207],40:198,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:206},o($VN,[2,88]),o($VN,[2,89]),{30:[1,208],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,209],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{28:[1,210]},o($V61,[2,31]),{2:$Vb1,8:147,9:148,11:150,12:151,13:152,14:153,15:154,16:155,18:156,21:144,22:149,25:211,26:$Vc1,27:$V0,40:157,41:$Vd1,48:$Vb,53:159,54:160,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vj,66:$Vk,67:$Vl,68:$Ve1,69:$Vf1,70:$Vg1,73:24,76:$Vm,77:$Vn},o($V61,[2,33]),{2:$Vx,7:212,60:$Vy},{2:$Vx,7:213,60:$Vy},{2:$Vx,7:214,60:$Vy},{2:$Vx,7:215,60:$Vy},o($Vm1,[2,24]),o($Vm1,[2,25]),o($Vm1,[2,26]),o($Vm1,[2,27]),o($Vm1,[2,28]),{2:$Vx,7:216,60:$Vy},{2:$Vx,7:217,60:$Vy},{41:[1,218],44:$VC},{28:$VE,42:$VF,44:$VG,51:$VH,52:$VI},{42:$VK},{42:$VM},o($V31,[2,82]),o($V31,[2,83]),o($V31,[2,84]),{60:[1,219]},{60:[1,220]},{42:$VF,44:$VG,51:$VH,52:$VI},{30:[1,221],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},o($V31,[2,36]),{49:$VP,50:$VQ,71:$VR,72:[1,222],82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},o([2,26,30,45,60,62,72,82],[2,98],{49:$VP,50:$VQ,71:$VR,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vi1,[2,99],{49:$VP,50:$VQ,71:$VR,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vn1,[2,101],{49:$VP,50:$VQ,71:$VR,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vn1,[2,102],{49:$VP,50:$VQ,71:$VR,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vo1,[2,103],{71:$VR,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vo1,[2,104],{71:$VR,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vo1,[2,105],{71:$VR,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vo1,[2,106],{71:$VR,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vj1,[2,108],{71:$VR,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vj1,[2,109],{71:$VR,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vp1,[2,110],{71:$VR,95:$V11}),o($Vp1,[2,111],{71:$VR,95:$V11}),o($Vp1,[2,112],{71:$VR,95:$V11}),o($Vp1,[2,113],{71:$VR,95:$V11}),{30:[1,223],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},o($V51,[2,116]),{30:[1,224],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,225],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,226],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,227],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,228],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,229],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,230],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,231],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},o($V31,[2,46],{49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($V31,[2,47]),{30:[1,232],62:$Vq1},{23:234,24:$VO},{41:[1,235]},{42:[1,236]},{46:[1,237]},{30:[1,238]},o($V51,[2,68]),{17:108,18:112,28:$V1,29:239,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Vr1,[2,63]),{45:[1,240],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{30:[1,241],62:$Vq1},{23:242,24:$VO},{24:[1,243]},{23:244,24:$VO},{17:108,18:112,28:$V1,29:245,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($V61,[2,32]),o($V61,[2,34]),o($Vm1,[2,21]),o($Vm1,[2,22]),o($Vm1,[2,23]),o($Vm1,[2,29]),o($Vm1,[2,30]),o($V31,$V71,{42:$V81}),{17:108,18:112,28:$V1,29:246,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{17:108,18:112,28:$V1,29:247,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($V31,[2,35]),{17:108,18:112,28:$V1,29:248,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{23:249,24:$VO},o($V51,[2,37]),o($V51,[2,38]),o($V51,[2,39]),o($V51,[2,40]),o($V51,[2,41]),o($V51,[2,42]),o($V51,[2,43]),o($V51,[2,44]),{23:250,24:$VO},{40:251,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($Vw,[2,73]),o($Vs1,[2,77]),{24:[1,253],46:[1,252]},{48:[1,254]},{17:108,18:112,28:$V1,29:255,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Vl1,[2,70],{49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),{45:[1,256]},{23:257,24:$VO},o($Vw,[2,75]),{78:258,79:259,80:[1,260],81:$Vt1},o($VN,[2,78]),{30:[1,262],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{49:$VP,50:$VQ,60:[1,263],71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{49:$VP,50:$VQ,60:[1,264],71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},o($V51,[2,85]),o($V61,[2,90]),o($Vw,[2,72]),{41:[1,265]},{40:266,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},{17:108,18:112,28:$V1,29:132,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,47:267,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{49:[1,268]},o($Va1,[2,51],{49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11}),o($Vr1,[2,64]),o($Vw,[2,74]),{26:[1,269],79:270,80:[1,271],81:$Vt1},{26:[1,272]},{72:[1,273]},{72:[1,274]},{2:$Vx,7:275,60:$Vy},{9:276,41:$Vh1,53:159,54:160},{9:277,41:$Vh1,53:159,54:160},o($Vs1,[2,76]),{44:[1,278]},{26:[1,279],62:$Vk1},{40:280,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg},o($VN,[2,91]),{26:[1,281]},{72:[1,282]},o($VN,[2,92]),{2:$Vu1,8:147,9:148,11:150,12:151,13:152,14:153,15:154,16:155,18:156,20:283,21:284,22:149,27:$V0,40:157,41:$Vd1,48:$Vb,53:159,54:160,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vj,66:$Vk,67:$Vl,68:$Ve1,69:$Vf1,70:$Vg1,73:24,76:$Vm,77:$Vn},{2:$Vu1,8:147,9:148,11:150,12:151,13:152,14:153,15:154,16:155,18:156,20:286,21:284,22:149,27:$V0,40:157,41:$Vd1,48:$Vb,53:159,54:160,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vj,66:$Vk,67:$Vl,68:$Ve1,69:$Vf1,70:$Vg1,73:24,76:$Vm,77:$Vn},o($VN,[2,79]),{30:[1,287]},{30:[1,288]},{17:108,18:112,28:$V1,29:289,31:48,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$V41,53:110,54:111,84:$Vo,89:39,91:$Vp,96:40,97:43,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($V31,[2,49]),{50:[1,290]},o($VN,[2,93]),{2:$Vu1,8:147,9:148,11:150,12:151,13:152,14:153,15:154,16:155,18:156,20:291,21:284,22:149,27:$V0,40:157,41:$Vd1,48:$Vb,53:159,54:160,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vj,66:$Vk,67:$Vl,68:$Ve1,69:$Vf1,70:$Vg1,73:24,76:$Vm,77:$Vn},o($Vv1,[2,95],{73:24,8:147,9:148,22:149,11:150,12:151,13:152,14:153,15:154,16:155,18:156,40:157,53:159,54:160,21:292,27:$V0,41:$Vd1,48:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vj,66:$Vk,67:$Vl,68:$Ve1,69:$Vf1,70:$Vg1,76:$Vm,77:$Vn}),o($Vw1,[2,19]),{2:$Vx,7:293,60:$Vy},{8:147,9:148,11:150,12:151,13:152,14:153,15:154,16:155,18:156,21:292,22:149,26:[2,96],27:$V0,40:157,41:$Vd1,48:$Vb,53:159,54:160,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vj,66:$Vk,67:$Vl,68:$Ve1,69:$Vf1,70:$Vg1,73:24,76:$Vm,77:$Vn},{23:294,24:$VO},{23:295,24:$VO},{45:[1,296],49:$VP,50:$VQ,71:$VR,82:$VS,83:$VT,85:$VU,86:$VV,87:$VW,88:$VX,90:$VY,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},o($V31,[2,50]),o($Vv1,[2,94],{73:24,8:147,9:148,22:149,11:150,12:151,13:152,14:153,15:154,16:155,18:156,40:157,53:159,54:160,21:292,27:$V0,41:$Vd1,48:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,65:$Vj,66:$Vk,67:$Vl,68:$Ve1,69:$Vf1,70:$Vg1,76:$Vm,77:$Vn}),o($Vw1,[2,18]),o($Vw1,[2,20]),o($VN,[2,80]),o($VN,[2,81]),o($V31,[2,48])],
defaultActions: {3:[2,2],59:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

   const Value = require('../clases/Value.js')
   const Type = require('../clases/Type.js')
   const Global = require('../clases/Global.js')
   const Print = require('../clases/Print.js')
   const Aritmetica = require('../clases/Aritmetica.js')
   const Unitaria = require('../clases/Unitaria.js')
   const Logica = require('../clases/Logica.js')
   const Declaracion = require('../clases/Declaracion.js')
   const Symbol = require('../clases/Symbol.js')
   const Asignacion = require('../clases/Asignacion.js')
   const If = require('../clases/If.js')
   const Bloque = require('../clases/Bloque.js')
   const While = require('../clases/While.js')
   const DoWhile = require('../clases/DoWhile.js')
   const For = require('../clases/For.js')
   var program = new Global()
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 51;
break;
case 4:return 90;
break;
case 5:return 52;
break;
case 6:return 91;
break;
case 7:return 92;
break;
case 8:return 93;
break;
case 9:return 95;
break;
case 10:return 94;
break;
case 11:return 85;
break;
case 12:return 42;
break;
case 13:return 86;
break;
case 14:return 84;
break;
case 15:return 87;
break;
case 16:return 88;
break;
case 17:return 49;
break;
case 18:return 50;
break;
case 19:return 71;
break;
case 20:return 72;
break;
case 21:return 60;
break;
case 22:return 83;
break;
case 23:return 82;
break;
case 24:return 28;
break;
case 25:return 30;
break;
case 26:return 24;
break;
case 27:return 26;
break;
case 28:return 62;
break;
case 29:return 95;
break;
case 30:return 44;
break;
case 31:return 45;
break;
case 32:return 55;
break;
case 33:return 57;
break;
case 34:return 58;
break;
case 35:return 59;
break;
case 36:return 48;
break;
case 37:return 56;
break;
case 38:return 27;
break;
case 39:return 100;
break;
case 40:return 101;
break;
case 41:return 76;
break;
case 42:return 75;
break;
case 43:return 67;
break;
case 44:return 65;
break;
case 45:return 77;
break;
case 46:return 80;
break;
case 47:return 81;
break;
case 48:return 66;
break;
case 49:return 61;
break;
case 50:return 64;
break;
case 51:return 68;
break;
case 52:return 46;
break;
case 53:return 70;
break;
case 54:return 69;
break;
case 55:return 32;
break;
case 56:return 33;
break;
case 57:return 34;
break;
case 58:return 35;
break;
case 59:return 36;
break;
case 60:return 37;
break;
case 61:return 38;
break;
case 62:return 39;
break;
case 63:return 103;
break;
case 64:return 102;  
break;
case 65:return 41;
break;
case 66:yy_.yytext = yy_.yytext.substring(1,yy_.yytext.length-1); return'cadena';
break;
case 67:yy_.yytext = yy_.yytext.substring(1,yy_.yytext.length-1); return'caracter';
break;
case 68:return 5;
break;
case 69:program.newError(Type.LEXICO, 'El símbolo: '+yy_.yytext+', no es parte'+
                                                ' del alfabeto.', yy_.yylloc.first_line, yy_.yylloc.first_column)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\^)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:list\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:exec\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:([0-9])+)/i,/^(?:([a-zA-Z_])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:[\']([^']|\\n|\\r|\\t)[\'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}