/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,17],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,25],$V8=[1,18],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,31],$Vd=[1,20],$Ve=[5,26,40,45,46,47,48,49,55,58,60,61,62,72,73],$Vf=[1,36],$Vg=[1,35],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[2,5,25,26,40,45,46,47,48,49,55,58,60,61,62,63,64,65,72,73,76,77],$Vl=[1,50],$Vm=[29,40],$Vn=[2,54],$Vo=[1,61],$Vp=[1,69],$Vq=[1,59],$Vr=[1,63],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,70],$Vx=[1,71],$Vy=[2,29,54],$Vz=[1,81],$VA=[1,80],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,100],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,116],$VU=[2,29,54,57,68,78,79,81,82,83,84,85,86,88,89,90,91,92,93],$VV=[2,5,25,26,40,45,46,47,48,49,55,58,60,61,62,63,64,65,71,72,73,76,77],$VW=[2,25,26,40,45,46,47,48,49,60,61,62,63,64,65,72,73,76,77],$VX=[2,29,54,57,68,78,79],$VY=[2,29,54,57,68,78,79,81,82,83,84,85,86,88,89],$VZ=[29,57],$V_=[2,29,54,57,68,78,79,81,82],$V$=[2,29,54,57,68,78,79,81,82,83,84,85,86],$V01=[2,29,54,57,68,78,79,81,82,83,84,85,86,88,89,90,91,92],$V11=[1,174],$V21=[1,194],$V31=[25,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"GLOBALES":4,"EOF":5,"GLOBAL":6,"DECLARACION":7,"SYNC":8,"ASIGNACION":9,"FUNCION":10,"IF":11,"SWITCH":12,"WHILE":13,"DOWHILE":14,"FOR":15,"PRINT":16,"MAIN":17,"INSTRUCCIONES":18,"INSTRUCCION":19,"TRANSFERENCIA":20,"LLAMADA":21,"BLOQUE":22,"llavea":23,"BLOQUE2":24,"llavec":25,"print":26,"parena":27,"EXPRL":28,"parenc":29,"NATIVA":30,"minusculas":31,"mayusculas":32,"tamanio":33,"truncar":34,"redondear":35,"typeOf":36,"acadena":37,"aarreglo":38,"TYPE":39,"id":40,"igual":41,"CASTEO":42,"incremento":43,"decremento":44,"tint":45,"tstring":46,"tdouble":47,"tbool":48,"tchar":49,"ACCESOVECTOR":50,"corchetea":51,"corchetec":52,"ACCESOLISTA":53,"ptcoma":54,"ex":55,"LISTAVALORES":56,"coma":57,"tmethod":58,"PARAM":59,"mientras":60,"has":61,"para":62,"retorno":63,"continuar":64,"romper":65,"OPTERNARIO":66,"interrog":67,"dospt":68,"IFSOLO":69,"ELSE":70,"sino":71,"si":72,"fswitch":73,"CASES":74,"DEFAULT":75,"caso":76,"defecto":77,"ologico":78,"ylogico":79,"exclamacion":80,"equals":81,"diferente":82,"menor":83,"mayor":84,"mayorigual":85,"menorigual":86,"EXP2":87,"mas":88,"menos":89,"por":90,"dividido":91,"modulo":92,"elevado":93,"EXPVAL":94,"NUM":95,"cadena":96,"caracter":97,"vtrue":98,"vfalse":99,"entero":100,"decimal":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"llavea",25:"llavec",26:"print",27:"parena",29:"parenc",31:"minusculas",32:"mayusculas",33:"tamanio",34:"truncar",35:"redondear",36:"typeOf",37:"acadena",38:"aarreglo",40:"id",41:"igual",43:"incremento",44:"decremento",45:"tint",46:"tstring",47:"tdouble",48:"tbool",49:"tchar",51:"corchetea",52:"corchetec",54:"ptcoma",55:"ex",57:"coma",58:"tmethod",60:"mientras",61:"has",62:"para",63:"retorno",64:"continuar",65:"romper",67:"interrog",68:"dospt",71:"sino",72:"si",73:"fswitch",76:"caso",77:"defecto",78:"ologico",79:"ylogico",80:"exclamacion",81:"equals",82:"diferente",83:"menor",84:"mayor",85:"mayorigual",86:"menorigual",88:"mas",89:"menos",90:"por",91:"dividido",92:"modulo",93:"elevado",96:"cadena",97:"caracter",98:"vtrue",99:"vfalse",100:"entero",101:"decimal"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[18,2],[18,1],[18,1],[19,2],[19,2],[19,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[22,2],[24,2],[24,1],[24,1],[16,4],[16,3],[30,4],[30,4],[30,4],[30,4],[30,4],[30,4],[30,4],[30,4],[7,2],[7,4],[42,4],[9,3],[9,2],[9,2],[39,1],[39,1],[39,1],[39,1],[39,1],[50,4],[53,6],[8,1],[8,1],[17,2],[21,4],[21,3],[56,3],[56,1],[10,6],[10,5],[59,4],[59,2],[13,5],[14,7],[15,9],[15,9],[20,1],[20,1],[20,1],[66,5],[11,1],[11,2],[70,2],[70,2],[69,5],[12,7],[12,7],[12,8],[74,5],[74,4],[75,3],[28,1],[28,3],[28,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,1],[94,2],[94,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[95,1],[95,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      program.ast = new Nodo('INICIO', [$$[$0-1]])
      var p = program
      program = new Global()
      p.ejecutar()
      return p;
   
break;
case 2:

      var p = program
      program = new Global()
      p.ejecutar()
      return p;
   
break;
case 3:
this.$ = new Nodo('GLOBALES', [$$[$0-1], $$[$0]])
break;
case 4:
this.$ = new Nodo('GLOBALES', [$$[$0]])
break;
case 5: case 18: case 32: case 57:
program.newError(Type.SINTACTICO, "No se esperaba: " + this.$, this._$.first_line, this._$.first_column)
break;
case 6: case 7: case 14:
program.instrucciones.push($$[$0-1].s); this.$ = new Nodo('GLOBAL', [$$[$0-1].n, $$[$0].n])
break;
case 8: case 10: case 11: case 12: case 13:
program.instrucciones.push($$[$0].s); this.$ = new Nodo('GLOBAL', [$$[$0].n])
break;
case 9:
program.instrucciones.push(new If($$[$0].s,this._$.first_line, this._$.first_column)); this.$ = new Nodo('GLOBAL', [$$[$0].n])
break;
case 15:
program.newExec($$[$0-1].s); this.$ = new Nodo('GLOBAL', [$$[$0-1].n,$$[$0].n])
break;
case 16:
$$[$0].s.unshift($$[$0-1].s);this.$={s:$$[$0].s,n:new Nodo('INSTRUCCIONES', [$$[$0-1].n, $$[$0].n])}
break;
case 17:
this.$={s:[$$[$0].s], n:new Nodo('INSTRUCCIONES', [$$[$0].n])}
break;
case 19: case 20: case 21: case 27: case 28:
this.$ = {s:$$[$0-1].s,n:new Nodo('INSTRUCCION', [$$[$0-1].n, $$[$0].n])};
break;
case 22:
this.$ = {s:new If($$[$0].s,this._$.first_line, this._$.first_column),n:new Nodo('INSTRUCCION', [$$[$0].n])}
break;
case 23: case 24: case 25: case 26:
this.$ = {s:$$[$0].s,n:new Nodo('INSTRUCCION', [$$[$0].n])};
break;
case 29:
this.$= {s:new Bloque($$[$0].s, this._$.first_line, this._$.first_column), n: new Nodo('BLOQUE', [new Nodo($$[$0-1],null), $$[$0].n])};
break;
case 30:
$$[$0].s.unshift($$[$0-1].s); this.$ = {s:$$[$0].s, n:new Nodo('BLOQUE2', [$$[$0-1].n, $$[$0].n])};
break;
case 31:
this.$={s:[], n:new Nodo('BLOQUE2', [new Nodo($$[$0], null)])};
break;
case 33:
this.$ = {s:new Print($$[$0-1].s, Type.PRINT, Type.PRINT, this._$.first_line, this._$.first_column),n:new Nodo('PRINT', [new Nodo($$[$0-3],null),new Nodo($$[$0-2], null), $$[$0-1].n, new Nodo($$[$0],null)])};
break;
case 34:
this.$ = {s:new Print(null, Type.PRINT, Type.PRINT, this._$.first_line, this._$.first_column),n:new Nodo('PRINT', [new Nodo($$[$0-2],null),new Nodo($$[$0-1],null),new Nodo($$[$0],null)])};
break;
case 43:
this.$ = {s:new Declaracion($$[$0], null, $$[$0-1].s, Type.DECLARACION, this._$.first_line, this._$.first_column),n:new Nodo('DECLARACION', [$$[$0-1].n, new Nodo($$[$0], null)])}
break;
case 44:
this.$ = {s:new Declaracion($$[$0-2], $$[$0].s, $$[$0-3].s, Type.DECLARACION, this._$.first_line, this._$.first_column),n:new Nodo('DECLARACION', [$$[$0-3].n, new Nodo($$[$0-2], null), new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 46:
this.$ = {s:new Asignacion($$[$0-2], $$[$0].s, Type.ASIGNACION, this._$.first_line, this._$.first_column), n:new Nodo('ASIGNACION', [new Nodo($$[$0-2], null), new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 47:
this.$ = {s:new Asignacion($$[$0-1], null, Type.INCREMENTO, this._$.first_line, this._$.first_column),n:new Nodo('ASIGNACION', [new Nodo($$[$0-1], null), new Nodo($$[$0], null)])}
break;
case 48:
this.$ = {s:new Asignacion($$[$0-1], null, Type.DECREMENTO, this._$.first_line, this._$.first_column),n:new Nodo('ASIGNACION', [new Nodo($$[$0-1], null), new Nodo($$[$0], null)])}
break;
case 49:
this.$ = {s:Type.INT,n:new Nodo('TYPE', [new Nodo($$[$0],null)])};
break;
case 50:
this.$ = {s:Type.STRING,n:new Nodo('TYPE', [new Nodo($$[$0],null)])};
break;
case 51:
this.$ = {s:Type.DOUBLE,n:new Nodo('TYPE', [new Nodo($$[$0],null)])};
break;
case 52:
this.$ = {s:Type.BOOLEAN,n:new Nodo('TYPE', [new Nodo($$[$0],null)])};
break;
case 53:
this.$ = {s:Type.CHAR,n:new Nodo('TYPE', [new Nodo($$[$0],null)])};
break;
case 56:
this.$ = {s:$$[$0], n:new Nodo('SYNC', [new Nodo($$[$0], null)])}
break;
case 58:
this.$ = {s:$$[$0].s,n:new Nodo('MAIN', [new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 59:
this.$ = {s:new Call($$[$0-3], $$[$0-1].s, this._$.first_line, this._$.first_column),n:new Nodo('LLAMADA', [new Nodo($$[$0-3],null), new Nodo($$[$0-2], null), $$[$0-1].n, new Nodo($$[$0], null)])};
break;
case 60:
this.$ = {s:new Call($$[$0-2], [], this._$.first_line, this._$.first_column),n:new Nodo('LLAMADA', [new Nodo($$[$0-2],null), new Nodo($$[$0-1], null), new Nodo($$[$0], null)])}
break;
case 61:
$$[$0-2].s.push($$[$0].s),this.$ ={s:$$[$0-2].s,n:new Nodo('LISTAVALORES', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 62:
this.$ = {s:[$$[$0].s],n:new Nodo('LISTAVALORES', [$$[$0].n])}
break;
case 63:
this.$={s: new Funcion($$[$0-4],$$[$0-2].s,$$[$0].s,Type.VOID,Type.FUNCION,this._$.first_line, this._$.first_column),n:new Nodo('FUNCION',[new Nodo($$[$0-5],null), new Nodo($$[$0-4],null), new Nodo($$[$0-3],null), $$[$0-2].n,new Nodo($$[$0-1],null), $$[$0].n])}
break;
case 64:
this.$={s: new Funcion($$[$0-3],[],$$[$0].s,Type.VOID,Type.FUNCION,this._$.first_line, this._$.first_column),n:new Nodo('FUNCION',[new Nodo($$[$0-4],null), new Nodo($$[$0-3],null), new Nodo($$[$0-2],null),new Nodo($$[$0-1],null), $$[$0].n])}
break;
case 65:
$$[$0-3].s.push({id: $$[$0], type: $$[$0-1].s}); this.$ = {s:$$[$0-3].s,n:new Nodo('PARAM', [$$[$0-3].n, new Nodo($$[$0-2], null), $$[$0-1].n, new Nodo($$[$0], null)])}
break;
case 66:
this.$ = {s:[{id: $$[$0], type: $$[$0-1].s}],n:new Nodo('PARAM', [$$[$0-1].n, new Nodo($$[$0], null)])}
break;
case 67:
this.$ = {s:new While($$[$0-2].s, $$[$0].s, this._$.first_line, this._$.first_column),n:new Nodo('WHILE', [new Nodo($$[$0-4],null), new Nodo($$[$0-3],null), $$[$0-2].n, new Nodo($$[$0-1],null), $$[$0].n])}
break;
case 68:
this.$ = {s:new DoWhile($$[$0-2].s, $$[$0-5].s, this._$.first_line, this._$.first_column), 
                                                  n:new Nodo('DOWHILE',[new Nodo($$[$0-6], null), $$[$0-5].n, new Nodo($$[$0-4],null), new Nodo($$[$0-3],null),$$[$0-2].n, new Nodo($$[$0-1],null), $$[$0].n])}
break;
case 69:
this.$ = {s:new For($$[$0-6].s,$$[$0-4].s,$$[$0-2].s,$$[$0].s,this._$.first_line, this._$.first_column),
                                                                             n:new Nodo('FOR', [new Nodo($$[$0-8], null), new Nodo($$[$0-7], null), $$[$0-6].n, new Nodo($$[$0-5],null), $$[$0-4].n, new Nodo($$[$0-3], null), $$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 70:
this.$ = {s:new For($$[$0-6].s,$$[$0-4].s,$$[$0-2].s,$$[$0].s,this._$.first_line, this._$.first_column),
                                                                            n:new Nodo('FOR', [new Nodo($$[$0-8], null), new Nodo($$[$0-7], null), $$[$0-6].n, new Nodo($$[$0-5],null), $$[$0-4].n, new Nodo($$[$0-3], null), $$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 72:
this.$ = {s:new Control(Type.CONTINUE,Type.CONTROL, this._$.first_line, this._$.first_column),n:new Nodo('TRANSFERENCIA', [new Nodo($$[$0], null)])}
break;
case 73:
this.$ = {s:new Control(Type.BREAK,Type.CONTROL, this._$.first_line, this._$.first_column),n:new Nodo('TRANSFERENCIA', [new Nodo($$[$0], null)])}
break;
case 75:
this.$ = {s:$$[$0].s,n:new Nodo('IF', [$$[$0].n])};
break;
case 76:
$$[$0-1].s.push(...($$[$0].s));this.$ = {s:$$[$0-1].s, n:new Nodo('IF', [$$[$0-1].n, $$[$0].n])};
break;
case 77:
this.$ = {s:[{exp: null, block: $$[$0].s}], n:new Nodo('ELSE', [new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 78:
this.$ = {s:$$[$0].s, n:new Nodo('ELSE', [new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 79:
this.$ = {s:[{exp: $$[$0-2].s, block: $$[$0].s}],n:new Nodo('IFSOLO', [new Nodo($$[$0-4], null), new Nodo($$[$0-3], null), $$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 80:
this.$ = {s:new Switch($$[$0-4].s, $$[$0-1].s, null, this._$.first_line, this._$.first_column),n:new Nodo('SWITCH',[new Nodo($$[$0-6],null), new Nodo($$[$0-5], null), $$[$0-4].n, new Nodo($$[$0-3], null), new Nodo($$[$0-2], null), $$[$0-1].n, new Nodo($$[$0], null)])}
break;
case 81:
this.$ = {s:new Switch($$[$0-4].s, null, $$[$0-1].s, this._$.first_line, this._$.first_column),n:new Nodo('SWITCH',[new Nodo($$[$0-6],null), new Nodo($$[$0-5], null), $$[$0-4].n, new Nodo($$[$0-3], null), new Nodo($$[$0-2], null), $$[$0-1].n, new Nodo($$[$0], null)])}
break;
case 82:
this.$ = {s:new Switch($$[$0-5].s, $$[$0-2].s, $$[$0-1].s, this._$.first_line, this._$.first_column),n:new Nodo('SWITCH',[new Nodo($$[$0-7],null), new Nodo($$[$0-6], null), $$[$0-5].n, new Nodo($$[$0-4], null), new Nodo($$[$0-3], null), $$[$0-2].n, $$[$0-1].n, new Nodo($$[$0], null)])}
break;
case 83:
$$[$0-4].s.push({exp:$$[$0-2].s, block:new Bloque($$[$0].s, this._$.first_line, this._$.first_column)}); this.$ = {s:$$[$0-4].s, n:new Nodo('CASES', [$$[$0-4].n, new Nodo($$[$0-3], null), $$[$0-2].n , new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 84:
this.$ = {s:[{exp: $$[$0-2].s, block: new Bloque($$[$0].s, this._$.first_line, this._$.first_column)}],n:new Nodo('CASES',[new Nodo($$[$0-3], null), $$[$0-2].n])}
break;
case 85:
this.$ = {s:new Bloque($$[$0].s, this._$.first_line, this._$.first_column),n:new Nodo('DEFAULT',[new Nodo($$[$0-2],null),new Nodo($$[$0-1], null), $$[$0].n])}
break;
case 87:
this.$ = {s:new Logica($$[$0-2].s, $$[$0].s, Type.OR, Type.LOGICO, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 88:
this.$ = {s:new Logica($$[$0-2].s, $$[$0].s, Type.AND, Type.LOGICO, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 89:
this.$ = {s:new Unitaria($$[$0].s, Type.NOT, Type.UNITARIA, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 90:
this.$ = {s:new Logica($$[$0-2].s, $$[$0].s, Type.IGUAL, Type.LOGICO, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 91:
this.$ = {s:new Logica($$[$0-2].s, $$[$0].s, Type.DIFERENTE, Type.LOGICO, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 92:
this.$ = {s:new Logica($$[$0-2].s, $$[$0].s, Type.MENOR, Type.LOGICO, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 93:
this.$ = {s:new Logica($$[$0-2].s, $$[$0].s, Type.MAYOR, Type.LOGICO, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 94:
this.$ = {s:new Logica($$[$0-2].s, $$[$0].s, Type.MAYORIGUAL, Type.LOGICO, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 95:
this.$ = {s:new Logica($$[$0-2].s, $$[$0].s, Type.MENORIGUAL, Type.LOGICO, this._$.first_line, this._$.first_column),n: new Nodo('EXPRL', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 96:
this.$ = {s:$$[$0].s, n:new Nodo('EXPRL', [$$[$0].n])}
break;
case 97:
this.$ = {s:new Aritmetica($$[$0-2].s, $$[$0].s, Type.SUMA, Type.ARITMETICO, this._$.first_line, this._$.first_column),n: new Nodo('EXP2', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 98:
this.$ = {s:new Aritmetica($$[$0-2].s, $$[$0].s, Type.RESTA, Type.ARITMETICO, this._$.first_line, this._$.first_column),n: new Nodo('EXP2', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 99:
this.$ = {s:new Aritmetica($$[$0-2].s, $$[$0].s, Type.MULTIPLICACION, Type.ARITMETICO, this._$.first_line, this._$.first_column),n: new Nodo('EXP2', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 100:
this.$ = {s:new Aritmetica($$[$0-2].s, $$[$0].s, Type.DIVISION, Type.ARITMETICO, this._$.first_line, this._$.first_column),n: new Nodo('EXP2', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 101:
this.$ = {s:new Aritmetica($$[$0-2].s, $$[$0].s, Type.MODULO, Type.ARITMETICO, this._$.first_line, this._$.first_column),n: new Nodo('EXP2', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 102:
this.$ = {s:new Aritmetica($$[$0-2].s, $$[$0].s, Type.POTENCIA, Type.ARITMETICO, this._$.first_line, this._$.first_column), n: new Nodo('EXP2', [$$[$0-2].n, new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 103:
this.$ = {s:$$[$0].s, n: new Nodo('EXP2',[$$[$0].n])}
break;
case 104:
this.$ = {s:new Unitaria($$[$0].s, Type.NEGACION, Type.UNITARIA, this._$.first_line, this._$.first_column),n:new Nodo('EXPVAL', [new Nodo($$[$0-1], null), $$[$0].n])};
break;
case 105:
this.$ = {s:$$[$0-1].s,n:new Nodo('EXPVAL', [new Nodo($$[$0-2], null),$$[$0-1].n,new Nodo($$[$0], null)])}
break;
case 106:
this.$ = {s:new Value($$[$0].s.value, $$[$0].s.type, Type.VALOR, this._$.first_line, this._$.first_column),n:new Nodo('EXPVAL', [$$[$0].n])};
break;
case 107:
this.$ = {s:new Value(String($$[$0]), Type.STRING, Type.VALOR, this._$.first_line, this._$.first_column),n:new Nodo('EXPVAL', [new Nodo("\\\""+$$[$0]+"\\\"", null)])};
break;
case 108:
this.$ = {s:new Value(String($$[$0]), Type.CHAR, Type.VALOR, this._$.first_line, this._$.first_column),n:new Nodo('EXPVAL', [new Nodo("\\\'"+$$[$0]+"\\\'", null)])};
break;
case 109:
this.$ = {s:new Value(true, Type.BOOLEAN, Type.VALOR, this._$.first_line, this._$.first_column),n:new Nodo('EXPVAL', [new Nodo($$[$0], null)])};
break;
case 110:
this.$ = {s:new Value(false, Type.BOOLEAN, Type.VALOR, this._$.first_line, this._$.first_column), n:new Nodo('EXPVAL', [new Nodo($$[$0], null)])};
break;
case 111:
this.$ = {s:new Symbol($$[$0], null, Type.SYMBOL, Type.VALOR, this._$.first_line, this._$.first_column), n:new Nodo('EXPVAL', [new Nodo($$[$0], null)])};
break;
case 112:
this.$ = {s:new Value(parseInt($$[$0]), Type.INT, Type.VALOR, this._$.first_line, this._$.first_column), n: new Nodo('NUM', [new Nodo($$[$0], null)])};
break;
case 113:
this.$ = {s:new Value(parseFloat($$[$0]), Type.DOUBLE, Type.VALOR, this._$.first_line, this._$.first_column), n:new Nodo('NUM', [new Nodo($$[$0], null)])};
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,26:$V0,39:16,40:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,55:$V7,58:$V8,60:$V9,61:$Va,62:$Vb,69:19,72:$Vc,73:$Vd},{1:[3]},{5:[1,32],6:33,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,26:$V0,39:16,40:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,55:$V7,58:$V8,60:$V9,61:$Va,62:$Vb,69:19,72:$Vc,73:$Vd},{1:[2,2]},o($Ve,[2,4]),o($Ve,[2,5]),{2:$Vf,8:34,54:$Vg},{2:$Vf,8:37,54:$Vg},o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),{2:$Vf,8:38,54:$Vg},{2:$Vf,8:39,54:$Vg},{40:[1,40]},{41:$Vh,43:$Vi,44:$Vj},{40:[1,44]},o($Vk,[2,75],{70:45,71:[1,46]}),{27:[1,47]},{27:[1,48]},{22:49,23:$Vl},{27:[1,51]},{27:[1,52]},{21:53,40:[1,54]},o($Vm,[2,49]),o($Vm,[2,50]),o($Vm,[2,51]),o($Vm,[2,52]),o($Vm,[2,53]),{27:[1,55]},{1:[2,1]},o($Ve,[2,3]),o($Ve,[2,6]),o($Vk,[2,56]),o($Vk,[2,57]),o($Ve,[2,7]),o($Ve,[2,14]),o($Ve,[2,15]),o($Vn,[2,43],{41:[1,56]}),{27:$Vo,28:57,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($Vy,[2,47]),o($Vy,[2,48]),{27:[1,72]},o($Vk,[2,76]),{11:74,22:73,23:$Vl,69:19,72:$Vc},{27:$Vo,28:75,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:76,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{60:[1,77]},{2:$Vz,7:82,9:83,11:85,12:86,13:87,14:88,15:89,16:90,19:79,20:84,21:91,24:78,25:$VA,26:$V0,39:16,40:$VB,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,60:$V9,61:$Va,62:$Vb,63:$VC,64:$VD,65:$VE,69:19,72:$Vc,73:$Vd},{7:97,9:96,39:16,40:$V1,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6},{27:$Vo,28:98,29:[1,99],40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($Vn,[2,58]),{27:$VF},{27:$Vo,28:101,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:102,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($Vy,[2,46],{78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($VU,[2,86]),{27:$Vo,28:117,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($VU,[2,96]),{27:$Vo,28:119,39:118,40:$Vp,42:58,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($VU,[2,103]),{27:$Vo,28:120,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($VU,[2,106]),o($VU,[2,107]),o($VU,[2,108]),o($VU,[2,109]),o($VU,[2,110]),o($VU,[2,111]),o($VU,[2,112]),o($VU,[2,113]),{29:[1,122],39:123,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,59:121},o($Vk,[2,77]),o($Vk,[2,78]),{29:[1,124],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},{29:[1,125],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},{27:[1,126]},o($VV,[2,29]),{2:$Vz,7:82,9:83,11:85,12:86,13:87,14:88,15:89,16:90,19:79,20:84,21:91,24:127,25:$VA,26:$V0,39:16,40:$VB,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,60:$V9,61:$Va,62:$Vb,63:$VC,64:$VD,65:$VE,69:19,72:$Vc,73:$Vd},o($VV,[2,31]),o($VV,[2,32]),{2:$Vf,8:128,54:$Vg},{2:$Vf,8:129,54:$Vg},{2:$Vf,8:130,54:$Vg},o($VW,[2,22]),o($VW,[2,23]),o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),{2:$Vf,8:131,54:$Vg},{2:$Vf,8:132,54:$Vg},{27:$VF,41:$Vh,43:$Vi,44:$Vj},o($Vn,[2,71]),o($Vn,[2,72]),o($Vn,[2,73]),{54:[1,133]},{54:[1,134]},{29:[1,135],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},o($Vn,[2,34]),{27:$Vo,28:138,29:[1,137],40:$Vp,42:58,56:136,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{29:[1,139],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},o($Vn,[2,44],{78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),{27:$Vo,28:140,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:141,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:142,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:143,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:144,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:145,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:146,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:147,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:148,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:149,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:150,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:151,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:152,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:153,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($VX,[2,89],{81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),{29:[1,154]},{29:[1,155],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},o($VY,[2,104],{90:$VQ,91:$VR,92:$VS,93:$VT}),{29:[1,156],57:[1,157]},{22:158,23:$Vl},{40:[1,159]},{23:[1,160]},{22:161,23:$Vl},{27:$Vo,28:162,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($VV,[2,30]),o($VW,[2,19]),o($VW,[2,20]),o($VW,[2,21]),o($VW,[2,27]),o($VW,[2,28]),{27:$Vo,28:163,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{27:$Vo,28:164,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($Vn,[2,33]),{29:[1,165],57:[1,166]},o($Vn,[2,60]),o($VZ,[2,62],{78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),{22:167,23:$Vl},o([2,29,54,57,68,78],[2,87],{79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($VX,[2,88],{81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($V_,[2,90],{83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($V_,[2,91],{83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($V$,[2,92],{88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($V$,[2,93],{88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($V$,[2,94],{88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($V$,[2,95],{88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($VY,[2,97],{90:$VQ,91:$VR,92:$VS,93:$VT}),o($VY,[2,98],{90:$VQ,91:$VR,92:$VS,93:$VT}),o($V01,[2,99],{93:$VT}),o($V01,[2,100],{93:$VT}),o($V01,[2,101],{93:$VT}),o($V01,[2,102],{93:$VT}),{27:$Vo,28:168,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($VU,[2,105]),{22:169,23:$Vl},{39:170,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6},o($Ve,[2,64]),o($VZ,[2,66]),{74:171,75:172,76:[1,173],77:$V11},o($Vk,[2,67]),{29:[1,175],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},{54:[1,176],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},{54:[1,177],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},o($Vn,[2,59]),{27:$Vo,28:178,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($VV,[2,79]),o($VU,[2,45]),o($Ve,[2,63]),{40:[1,179]},{25:[1,180],75:181,76:[1,182],77:$V11},{25:[1,183]},{27:$Vo,28:184,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},{68:[1,185]},{2:$Vf,8:186,54:$Vg},{9:187,40:$V1},{9:188,40:$V1},o($VZ,[2,61],{78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o($VZ,[2,65]),o($Vk,[2,80]),{25:[1,189]},{27:$Vo,28:190,40:$Vp,42:58,80:$Vq,87:60,89:$Vr,94:62,95:64,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx},o($Vk,[2,81]),{68:[1,191],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},{2:$V21,7:82,9:83,11:85,12:86,13:87,14:88,15:89,16:90,18:192,19:193,20:84,21:91,26:$V0,39:16,40:$VB,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,60:$V9,61:$Va,62:$Vb,63:$VC,64:$VD,65:$VE,69:19,72:$Vc,73:$Vd},o($Vk,[2,68]),{29:[1,195]},{29:[1,196]},o($Vk,[2,82]),{68:[1,197],78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT},{2:$V21,7:82,9:83,11:85,12:86,13:87,14:88,15:89,16:90,18:198,19:193,20:84,21:91,26:$V0,39:16,40:$VB,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,60:$V9,61:$Va,62:$Vb,63:$VC,64:$VD,65:$VE,69:19,72:$Vc,73:$Vd},{25:[2,85]},o($V31,[2,17],{39:16,69:19,7:82,9:83,20:84,11:85,12:86,13:87,14:88,15:89,16:90,21:91,19:193,18:199,2:$V21,26:$V0,40:$VB,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,60:$V9,61:$Va,62:$Vb,63:$VC,64:$VD,65:$VE,72:$Vc,73:$Vd}),o($V31,[2,18]),{22:200,23:$Vl},{22:201,23:$Vl},{2:$V21,7:82,9:83,11:85,12:86,13:87,14:88,15:89,16:90,18:202,19:193,20:84,21:91,26:$V0,39:16,40:$VB,45:$V2,46:$V3,47:$V4,48:$V5,49:$V6,60:$V9,61:$Va,62:$Vb,63:$VC,64:$VD,65:$VE,69:19,72:$Vc,73:$Vd},o($V31,[2,84]),o($V31,[2,16]),o($Vk,[2,69]),o($Vk,[2,70]),o($V31,[2,83])],
defaultActions: {3:[2,2],32:[2,1],192:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

   const Value = require('../clases/Value.js')
   const Type = require('../clases/Type.js')
   const Global = require('../clases/Global.js')
   const Print = require('../clases/Print.js')
   const Aritmetica = require('../clases/Aritmetica.js')
   const Unitaria = require('../clases/Unitaria.js')
   const Logica = require('../clases/Logica.js')
   const Declaracion = require('../clases/Declaracion.js')
   const Symbol = require('../clases/Symbol.js')
   const Asignacion = require('../clases/Asignacion.js')
   const If = require('../clases/If.js')
   const Bloque = require('../clases/Bloque.js')
   const While = require('../clases/While.js')
   const DoWhile = require('../clases/DoWhile.js')
   const For = require('../clases/For.js')
   const Control = require('../clases/Control.js')
   const Switch = require('../clases/Switch.js')
   const Nodo = require('../clases/Nodo.js')
   const Funcion = require('../clases/Funcion.js')
   const Call = require('../clases/Call.js')
   var program = new Global()
   var cadena ='';
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 43;
break;
case 4:return 88;
break;
case 5:return 44;
break;
case 6:return 89;
break;
case 7:return 90;
break;
case 8:return 91;
break;
case 9:return 93;
break;
case 10:return 92;
break;
case 11:return 81;
break;
case 12:return 41;
break;
case 13:return 82;
break;
case 14:return 80;
break;
case 15:return 85;
break;
case 16:return 86;
break;
case 17:return 83;
break;
case 18:return 84;
break;
case 19:return 67;
break;
case 20:return 68;
break;
case 21:return 54;
break;
case 22:return 79;
break;
case 23:return 78;
break;
case 24:return 27;
break;
case 25:return 29;
break;
case 26:return 23;
break;
case 27:return 25;
break;
case 28:return 57;
break;
case 29:return 93;
break;
case 30:return 51;
break;
case 31:return 52;
break;
case 32:return 45;
break;
case 33:return 47;
break;
case 34:return 48;
break;
case 35:return 49;
break;
case 36:return 'tlista';
break;
case 37:return 46;
break;
case 38:return 26;
break;
case 39:return 98;
break;
case 40:return 99;
break;
case 41:return 72;
break;
case 42:return 71;
break;
case 43:return 62;
break;
case 44:return 60;
break;
case 45:return 73;
break;
case 46:return 76;
break;
case 47:return 77;
break;
case 48:return 61;
break;
case 49:return 55;
break;
case 50:return 58;
break;
case 51:return 63;
break;
case 52:return 'nuevo';
break;
case 53:return 65;
break;
case 54:return 64;
break;
case 55:return 31;
break;
case 56:return 32;
break;
case 57:return 33;
break;
case 58:return 34;
break;
case 59:return 35;
break;
case 60:return 36;
break;
case 61:return 37;
break;
case 62:return 38;
break;
case 63:return 101;
break;
case 64:return 100;  
break;
case 65:yy_.yytext = yy_.yytext.toUpperCase();return 40;
break;
case 66:cadena = '';this.begin("str");
break;
case 67:cadena += yy_.yytext;
break;
case 68:cadena += '\"';
break;
case 69:cadena += '\n';
break;
case 70:cadena += '\t';
break;
case 71:cadena += '\r';
break;
case 72:cadena += '\\';
break;
case 73:cadena += '\'';
break;
case 74:yy_.yytext = cadena; this.popState(); return 96
break;
case 75:cadena=''; this.popState();program.newError(
                                                         Type.LEXICO, 'El símbolo: '+cadena+', no se pudo'+
                                                         ' reconocer.', yy_.yylloc.first_line, yy_.yylloc.first_column)
break;
case 76:yy_.yytext = yy_.yytext.substring(1,yy_.yytext.length-1); 
                                                         yy_.yytext = yy_.yytext.replace(/\\n/g, '\n')
                                                         yy_.yytext = yy_.yytext.replace(/\\r/g, '\r')
                                                         yy_.yytext = yy_.yytext.replace(/\\t/g, '\t')
                                                         yy_.yytext = yy_.yytext.replace(/\\\'/g, '\'')
                                                         yy_.yytext = yy_.yytext.replace(/\\\"/g, '\"')
                                                         yy_.yytext = yy_.yytext.replace(/\\\\/g, '\\')
                                                         return'caracter';
break;
case 77:return 5;
break;
case 78:program.newError(Type.LEXICO, 'El símbolo: '+yy_.yytext+', no se pudo'+
                                                ' reconocer.', yy_.yylloc.first_line, yy_.yylloc.first_column)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\^)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:list\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:exec\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:([0-9])+)/i,/^(?:([a-zA-Z_ñÑ])([a-z0-9A-Z_ñÑ])*)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:["])/i,/^(?:.)/i,/^(?:[\'](\\n|\\r|\\t|\\'|\\"|\\\\|[^\'])[\'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"str":{"rules":[67,68,69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}