/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,12],$V2=[1,16],$V3=[1,34],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,15],$Vb=[1,26],$Vc=[1,33],$Vd=[1,32],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[5,12,15,21,22,23,33,34,35,36,37,44,45,48,50,51,56,68,74,75,76,77,78],$Vj=[1,42],$Vk=[2,77],$Vl=[1,56],$Vm=[25,30,38,39,40,52],$Vn=[25,30,38,39,40,52,54],$Vo=[1,65],$Vp=[25,30,38,39,40,52,54,58,59],$Vq=[25,30,38,39,40,52,54,58,59,61,62],$Vr=[25,30,38,39,40,52,54,58,59,61,62,64,65],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[25,30,38,39,40,52,54,58,59,61,62,64,65,67,68,69,70,71,72],$Vx=[1,84],$Vy=[1,89],$Vz=[15,25,29],$VA=[1,117],$VB=[25,30,38,39,40,52,54,58,59,61,62,64,65,67,68],$VC=[25,30,38,39,40,52,54,58,59,61,62,64,65,67,68,69,70,71],$VD=[5,12,15,21,22,23,33,34,35,36,37,43,44,45,48,50,51,56,68,74,75,76,77,78],$VE=[1,134],$VF=[21,48,50],$VG=[1,152];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"SYNC":8,"ASIGNACION":9,"IF":10,"SWITCH":11,"WHILE":12,"PRINT":13,"OPTERNARIO":14,"id":15,"incremento":16,"decremento":17,"BLOQUE":18,"llavea":19,"BLOQUE2":20,"llavec":21,"print":22,"parena":23,"EXPRL":24,"parenc":25,"TYPE":26,"igual":27,"CASTEO":28,"corchetea":29,"corchetec":30,"nuevo":31,"LISTAVALORES":32,"tint":33,"tstring":34,"tdouble":35,"tboolean":36,"tchar":37,"ptcoma":38,"interrog":39,"dospt":40,"IFSOLO":41,"ELSE":42,"sino":43,"si":44,"fswitch":45,"CASES":46,"DEFAULT":47,"caso":48,"BREAK":49,"defecto":50,"romper":51,"ologico":52,"EXPRL2":53,"ylogico":54,"EXPRL3":55,"exclamacion":56,"EXP":57,"equals":58,"diferente":59,"EXP2":60,"menor":61,"mayor":62,"EXP3":63,"mayorigual":64,"menorigual":65,"EXP4":66,"mas":67,"menos":68,"por":69,"dividido":70,"modulo":71,"elevado":72,"EXPVAL":73,"num":74,"cadena":75,"caracter":76,"vtrue":77,"vfalse":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"WHILE",15:"id",16:"incremento",17:"decremento",19:"llavea",21:"llavec",22:"print",23:"parena",25:"parenc",27:"igual",29:"corchetea",30:"corchetec",31:"nuevo",32:"LISTAVALORES",33:"tint",34:"tstring",35:"tdouble",36:"tboolean",37:"tchar",38:"ptcoma",39:"interrog",40:"dospt",43:"sino",44:"si",45:"fswitch",48:"caso",50:"defecto",51:"romper",52:"ologico",54:"ylogico",56:"exclamacion",58:"equals",59:"diferente",61:"menor",62:"mayor",64:"mayorigual",65:"menorigual",67:"mas",68:"menos",69:"por",70:"dividido",71:"modulo",72:"elevado",74:"num",75:"cadena",76:"caracter",77:"vtrue",78:"vfalse"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,3],[18,2],[20,2],[20,1],[13,4],[13,3],[7,2],[7,4],[7,5],[7,10],[7,8],[28,3],[9,3],[9,4],[26,2],[26,2],[26,2],[26,2],[26,2],[8,1],[14,5],[10,1],[10,2],[42,2],[42,2],[41,5],[11,7],[11,7],[11,8],[46,4],[46,3],[46,4],[47,3],[47,4],[49,2],[24,3],[24,1],[53,3],[53,1],[55,2],[55,1],[57,3],[57,3],[57,1],[60,3],[60,3],[60,1],[63,3],[63,3],[63,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[73,1],[73,2],[73,3],[73,1],[73,1],[73,1],[73,1],[73,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:$V1,22:$V2,23:$V3,24:17,26:13,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,41:14,44:$V9,45:$Va,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{1:[3]},{5:[1,39],6:40,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:$V1,22:$V2,23:$V3,24:17,26:13,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,41:14,44:$V9,45:$Va,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{1:[2,2]},o($Vi,[2,4]),{8:41,38:$Vj},{8:43,38:$Vj},o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),{8:44,38:$Vj},{8:45,38:$Vj},o([39,52,54,58,59,61,62,64,65,67,68,69,70,71,72],$Vk,{16:[1,46],17:[1,47],27:[1,48]}),{15:[1,49],29:[1,50]},o($Vi,[2,34],{42:51,43:[1,52]}),{23:[1,53]},{23:[1,54]},{39:[1,55],52:$Vl},{8:57,38:$Vj},{8:58,38:$Vj},{8:59,38:$Vj},{8:60,38:$Vj},{8:61,38:$Vj},{23:[1,62]},o($Vm,[2,49],{54:[1,63]}),o($Vn,[2,51]),{15:$Vo,23:$V3,55:64,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($Vn,[2,53],{58:[1,66],59:[1,67]}),o($Vp,[2,56],{61:[1,68],62:[1,69]}),o($Vq,[2,59],{64:[1,70],65:[1,71]}),o($Vr,[2,62],{67:[1,72],68:[1,73],69:$Vs,70:$Vt,71:$Vu,72:$Vv}),o($Vw,[2,69]),o($Vw,[2,70]),{74:[1,78]},{15:$Vo,23:$V3,24:79,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($Vw,[2,73]),o($Vw,[2,74]),o($Vw,[2,75]),o($Vw,[2,76]),{1:[2,1]},o($Vi,[2,3]),o($Vi,[2,5]),o([5,12,15,21,22,23,25,29,33,34,35,36,37,44,45,48,50,51,56,68,74,75,76,77,78],[2,32]),o($Vi,[2,6]),o($Vi,[2,10]),o($Vi,[2,11]),{8:80,38:$Vj},{8:81,38:$Vj},{15:$Vo,23:$Vx,24:82,28:83,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{27:[1,85],38:[2,19]},{30:[1,86]},o($Vi,[2,35]),{10:88,18:87,19:$Vy,41:14,44:$V9},{15:$Vo,23:$V3,24:90,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,24:91,25:[1,92],53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,24:93,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,24:94,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($Vz,[2,27]),o($Vz,[2,28]),o($Vz,[2,29]),o($Vz,[2,30]),o($Vz,[2,31]),{15:$Vo,23:$V3,24:95,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,53:96,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($Vn,[2,52]),o($Vw,$Vk),{15:$Vo,23:$V3,57:97,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,57:98,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,60:99,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,60:100,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,63:101,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,63:102,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,66:103,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,66:104,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,66:105,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,66:106,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,66:107,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,66:108,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($Vw,[2,71]),{25:[1,109],52:$Vl},o($Vi,[2,12]),o($Vi,[2,13]),{38:[2,25],52:$Vl},{15:$Vo,23:$V3,24:110,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,24:79,26:111,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$Vx,24:112,28:113,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:[1,114]},o($Vi,[2,36]),o($Vi,[2,37]),{6:116,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:$V1,20:115,21:$VA,22:$V2,23:$V3,24:17,26:13,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,41:14,44:$V9,45:$Va,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{25:[1,118],52:$Vl},{25:[1,119],52:$Vl},{38:[2,18]},{40:[1,120],52:$Vl},o($Vm,[2,48]),{25:[1,121],52:$Vl},o($Vn,[2,50]),o($Vp,[2,54]),o($Vp,[2,55]),o($Vq,[2,57]),o($Vq,[2,58]),o($Vr,[2,60]),o($Vr,[2,61]),o($VB,[2,63],{69:$Vs,70:$Vt,71:$Vu,72:$Vv}),o($VB,[2,64],{69:$Vs,70:$Vt,71:$Vu,72:$Vv}),o($VC,[2,65],{72:$Vv}),o($VC,[2,66],{72:$Vv}),o($VC,[2,67],{72:$Vv}),o($VC,[2,68],{72:$Vv}),o($Vw,[2,72]),{38:[2,26],52:$Vl},{25:[1,122]},{38:[2,20],52:$Vl},{15:$Vo,23:$V3,24:123,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{27:[1,124]},o($VD,[2,14]),{6:116,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:$V1,20:125,21:$VA,22:$V2,23:$V3,24:17,26:13,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,41:14,44:$V9,45:$Va,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($VD,[2,16]),{19:[1,126]},{38:[2,17]},{15:$Vo,23:$V3,24:127,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{18:128,19:$Vy},o([15,23,56,68,74,75,76,77,78],[2,24]),{38:[2,21],52:$Vl},{19:[1,130],31:[1,129]},o($VD,[2,15]),{46:131,47:132,48:[1,133],50:$VE},{38:[2,33],52:$Vl},o($VD,[2,38]),{26:135,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8},{32:[1,136]},{21:[1,137],47:138,48:[1,139],50:$VE},{21:[1,140]},{40:[1,141]},{40:[1,142]},{29:[1,143]},{21:[1,144]},o($Vi,[2,39]),{21:[1,145]},{40:[1,146]},o($Vi,[2,40]),{4:147,6:4,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:$V1,22:$V2,23:$V3,24:17,26:13,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,41:14,44:$V9,45:$Va,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{4:148,6:4,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:$V1,22:$V2,23:$V3,24:17,26:13,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,41:14,44:$V9,45:$Va,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{15:$Vo,23:$V3,24:149,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{38:[2,23]},o($Vi,[2,41]),{4:150,6:4,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:$V1,22:$V2,23:$V3,24:17,26:13,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,41:14,44:$V9,45:$Va,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($VF,[2,43],{7:5,9:6,10:7,11:8,13:10,14:11,26:13,41:14,24:17,53:24,55:25,57:27,60:28,63:29,66:30,73:31,6:40,49:151,12:$V0,15:$V1,22:$V2,23:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,44:$V9,45:$Va,51:$VG,56:$Vb,68:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh}),{6:40,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:$V1,21:[2,45],22:$V2,23:$V3,24:17,26:13,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,41:14,44:$V9,45:$Va,49:153,51:$VG,53:24,55:25,56:$Vb,57:27,60:28,63:29,66:30,68:$Vc,73:31,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{30:[1,154],52:$Vl},o($VF,[2,42],{7:5,9:6,10:7,11:8,13:10,14:11,26:13,41:14,24:17,53:24,55:25,57:27,60:28,63:29,66:30,73:31,6:40,12:$V0,15:$V1,22:$V2,23:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,44:$V9,45:$Va,56:$Vb,68:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh}),o($VF,[2,44]),{8:155,38:$Vj},{21:[2,46]},{38:[2,22]},o($VF,[2,47])],
defaultActions: {3:[2,2],39:[2,1],92:[2,18],119:[2,17],144:[2,23],153:[2,46],154:[2,22]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios
break;
case 1://Comentario
break;
case 2://Comentario bloque
break;
case 3:return 67;
break;
case 4:return 16;
break;
case 5:return 68;
break;
case 6:return 17;
break;
case 7:return 69;
break;
case 8:return 70;
break;
case 9:return 72;
break;
case 10:return 71;
break;
case 11:return 27;
break;
case 12:return 58;
break;
case 13:return 56;
break;
case 14:return 59;
break;
case 15:return 61;
break;
case 16:return 65;
break;
case 17:return 62;
break;
case 18:return 64;
break;
case 19:return 39;
break;
case 20:return 40;
break;
case 21:return 38;
break;
case 22:return 54;
break;
case 23:return 52;
break;
case 24:return 23;
break;
case 25:return 25;
break;
case 26:return 19;
break;
case 27:return 21;
break;
case 28:return 'coma';
break;
case 29:return 72;
break;
case 30:return 29;
break;
case 31:return 30
break;
case 32:return 33;
break;
case 33:return 35;
break;
case 34:return 'tbool';
break;
case 35:return 37;
break;
case 36:return 34;
break;
case 37:return 22;
break;
case 38:return 77;
break;
case 39:return 78;
break;
case 40:return 44;
break;
case 41:return 43;
break;
case 42:return 'para';
break;
case 43:return 'mientras';
break;
case 44:return 45;
break;
case 45:return 48;
break;
case 46:return 50;
break;
case 47:return 'has';
break;
case 48:return 'ex';
break;
case 49:return 'tmethod';
break;
case 50:return 'retorno';
break;
case 51:return 31;
break;
case 52:return 51;
break;
case 53:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return'caracter';
break;
case 54:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return'cadena';
break;
case 55:return 74;
break;
case 56:return 15;
break;
case 57:return 5;
break;
case 58:console.log('Error léxico: '+yy_.yytext+', en la línea: '+yy_.yylloc.first_line+'; columna: '+yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\\.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\^)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:exec\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:'[[a-zA-Z0-9]|[\\]|[\\\']|[\\\"]|[\\n]|[\\t]|[\\r]')/i,/^(?:"[[^\"]|[\\\""]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z_])(azAZ09_)*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}