/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,47],$V2=[1,53],$V3=[1,54],$V4=[1,55],$V5=[1,56],$V6=[1,57],$V7=[1,58],$V8=[1,60],$V9=[1,19],$Va=[1,18],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[1,30],$Vh=[1,22],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[1,36],$Vm=[1,24],$Vn=[1,39],$Vo=[1,46],$Vp=[1,45],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[5,27,28,32,33,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,76,77,86,96,102,103,104,105,106],$Vv=[1,64],$Vw=[49,50,72,82,84,88,89,92,93,95,96,97,98,99,100],$Vx=[2,127],$Vy=[1,70],$Vz=[2,123],$VA=[1,75],$VB=[1,72],$VC=[1,76],$VD=[1,73],$VE=[1,74],$VF=[2,124],$VG=[1,77],$VH=[2,125],$VI=[1,78],$VJ=[5,26,27,28,32,33,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,69,70,71,76,77,80,81,86,96,102,103,104,105,106],$VK=[1,84],$VL=[1,92],$VM=[30,41,44,50],$VN=[24,26,30,45,60,62,68,72,82],$VO=[24,26,30,45,60,62,68,72,82,84],$VP=[24,26,30,45,60,62,68,72,82,84,88,89],$VQ=[24,26,30,45,49,50,60,62,68,72,82,84,88,89],$VR=[24,26,30,45,49,50,60,62,68,72,82,84,88,89,92,93],$VS=[1,106],$VT=[1,107],$VU=[1,108],$VV=[1,109],$VW=[24,26,30,45,49,50,60,62,68,72,82,84,88,89,92,93,95,96,97,98,99,100],$VX=[1,120],$VY=[2,43],$VZ=[1,126],$V_=[30,60,68],$V$=[1,137],$V01=[1,154],$V11=[1,155],$V21=[1,156],$V31=[1,159],$V41=[1,199],$V51=[5,24,26,27,28,30,32,33,35,36,37,38,39,41,45,48,49,50,55,56,57,58,59,60,61,62,64,65,66,67,68,72,76,77,82,84,86,88,89,92,93,95,96,97,98,99,100,102,103,104,105,106],$V61=[26,30,62],$V71=[1,206],$V81=[26,27,28,32,33,35,36,37,38,39,41,48,55,56,57,58,59,65,66,67,69,70,71,76,77,80,81,86,96,102,103,104,105,106],$V91=[24,26,30,45,49,50,60,62,68,72,82,84,88,89,92,93,95,96],$Va1=[24,26,30,45,49,50,60,62,68,72,82,84,88,89,92,93,95,96,97,98,99],$Vb1=[60,68],$Vc1=[1,233],$Vd1=[24,26,30,42,45,49,50,60,62,68,72,82,84,88,89,92,93,95,96,97,98,99,100],$Ve1=[5,26,27,28,32,33,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,69,70,71,75,76,77,80,81,86,96,102,103,104,105,106],$Vf1=[30,62],$Vg1=[1,261],$Vh1=[26,80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"GLOBALES":4,"EOF":5,"GLOBAL":6,"DECLARACION":7,"SYNC":8,"ASIGNACION":9,"FUNCION":10,"IF":11,"SWITCH":12,"WHILE":13,"DOWHILE":14,"FOR":15,"PRINT":16,"OPTERNARIO":17,"LLAMADA":18,"MAIN":19,"INSTRUCCIONES":20,"INSTRUCCION":21,"TRANSFERENCIA":22,"BLOQUE":23,"llavea":24,"BLOQUE2":25,"llavec":26,"print":27,"parena":28,"EXPRL":29,"parenc":30,"NATIVA":31,"minusculas":32,"mayusculas":33,"EXPLR":34,"tamanio":35,"truncar":36,"redondear":37,"typeOf":38,"toCharArray":39,"TYPE":40,"id":41,"igual":42,"CASTEO":43,"corchetea":44,"corchetec":45,"nuevo":46,"LISTAVALORES":47,"tlista":48,"menor":49,"mayor":50,"incremento":51,"decremento":52,"ACCESOVECTOR":53,"ACCESOLISTA":54,"tint":55,"tstring":56,"tdouble":57,"tboolean":58,"tchar":59,"ptcoma":60,"ex":61,"coma":62,"PARAM":63,"tmethod":64,"mientras":65,"do":66,"para":67,"dospt":68,"retorno":69,"continuar":70,"romper":71,"interrog":72,"IFSOLO":73,"ELSE":74,"sino":75,"si":76,"fswitch":77,"CASES":78,"DEFAULT":79,"caso":80,"defecto":81,"ologico":82,"EXPRL2":83,"ylogico":84,"EXPRL3":85,"exclamacion":86,"EXP":87,"equals":88,"diferente":89,"EXP2":90,"EXP3":91,"mayorigual":92,"menorigual":93,"EXP4":94,"mas":95,"menos":96,"por":97,"dividido":98,"modulo":99,"elevado":100,"EXPVAL":101,"num":102,"cadena":103,"caracter":104,"vtrue":105,"vfalse":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",24:"llavea",26:"llavec",27:"print",28:"parena",30:"parenc",32:"minusculas",33:"mayusculas",34:"EXPLR",35:"tamanio",36:"truncar",37:"redondear",38:"typeOf",39:"toCharArray",41:"id",42:"igual",44:"corchetea",45:"corchetec",46:"nuevo",48:"tlista",49:"menor",50:"mayor",51:"incremento",52:"decremento",55:"tint",56:"tstring",57:"tdouble",58:"tboolean",59:"tchar",60:"ptcoma",61:"ex",62:"coma",64:"tmethod",65:"mientras",66:"do",67:"para",68:"dospt",69:"retorno",70:"continuar",71:"romper",72:"interrog",75:"sino",76:"si",77:"fswitch",80:"caso",81:"defecto",82:"ologico",84:"ylogico",86:"exclamacion",88:"equals",89:"diferente",92:"mayorigual",93:"menorigual",95:"mas",96:"menos",97:"por",98:"dividido",99:"modulo",100:"elevado",102:"num",103:"cadena",104:"caracter",105:"vtrue",106:"vfalse"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[20,2],[20,1],[21,2],[21,2],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,2],[21,2],[23,2],[25,2],[25,1],[16,4],[16,3],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[7,2],[7,4],[7,5],[7,10],[7,8],[7,9],[43,3],[9,3],[9,4],[9,2],[9,2],[9,3],[9,3],[40,1],[40,1],[40,1],[40,1],[40,1],[53,4],[54,6],[8,1],[19,2],[18,4],[18,3],[47,3],[47,1],[10,6],[10,5],[10,6],[10,5],[63,4],[63,2],[13,5],[14,9],[15,11],[15,11],[22,1],[22,1],[22,1],[17,5],[11,1],[11,2],[74,2],[74,2],[73,5],[12,7],[12,7],[12,8],[78,4],[78,3],[79,3],[29,3],[29,1],[83,3],[83,1],[85,2],[85,1],[87,3],[87,3],[87,1],[90,3],[90,3],[90,1],[91,3],[91,3],[91,1],[94,3],[94,3],[94,3],[94,3],[94,3],[94,3],[94,1],[101,1],[101,2],[101,3],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:17,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,61:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{1:[3]},{5:[1,61],6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:17,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,61:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{1:[2,2]},o($Vu,[2,4]),{8:63,60:$Vv},{8:65,60:$Vv},o($Vu,[2,7]),o($Vu,[2,8]),o($Vu,[2,9]),o($Vu,[2,10]),o($Vu,[2,11]),o($Vu,[2,12]),{8:66,60:$Vv},{8:67,60:$Vv},o($Vw,$Vx,{8:68,60:$Vv}),o($Vu,[2,16]),{41:[1,69],44:$Vy},{40:71,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf},o($Vw,$Vz,{28:$VA,42:$VB,44:$VC,51:$VD,52:$VE}),o($Vw,$VF,{42:$VG}),o($Vw,$VH,{42:$VI}),{41:[1,79]},o($VJ,[2,83],{74:80,75:[1,81]}),{28:[1,82]},{18:87,28:$V1,29:83,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{24:[1,88]},{28:[1,89]},{28:[1,90]},{72:[1,91],82:$VL},{18:93,41:[1,94]},o($VM,[2,56]),o($VM,[2,57]),o($VM,[2,58]),o($VM,[2,59]),o($VM,[2,60]),{28:[1,95]},o($VN,[2,95],{84:[1,96]}),o($VO,[2,97]),{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,85:97,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($VO,[2,99],{88:[1,98],89:[1,99]}),o($VP,[2,102],{49:[1,100],50:[1,101]}),o($VQ,[2,105],{92:[1,102],93:[1,103]}),o($VR,[2,108],{95:[1,104],96:[1,105],97:$VS,98:$VT,99:$VU,100:$VV}),o($VW,[2,115]),o($VW,[2,116]),{102:[1,110]},{18:87,28:$V1,29:111,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($VW,[2,119]),o($VW,[2,120]),o($VW,[2,121]),o($VW,[2,122]),o($VW,[2,126]),{28:[1,112]},{28:[1,113]},{28:[1,114]},{28:[1,115]},{28:[1,116]},{28:[1,117]},{28:[1,118]},{28:[1,119]},{1:[2,1]},o($Vu,[2,3]),o($Vu,[2,5]),o($VJ,[2,63]),o($Vu,[2,6]),o($Vu,[2,13]),o($Vu,[2,14]),o($Vu,[2,15]),{28:[1,121],42:$VX,60:$VY},{45:[1,122]},{41:[1,123]},{18:87,28:$VZ,29:124,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,43:125,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($V_,[2,52]),o($V_,[2,53]),{18:87,28:$V1,29:129,30:[1,128],31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,47:127,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{34:[1,130],44:[1,131]},{34:[1,132]},{34:[1,133]},{28:[1,134]},o($VJ,[2,84]),{11:136,23:135,24:$V$,73:23,76:$Vl},{18:87,28:$V1,29:138,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{24:[1,139],82:$VL},o($VW,$Vz,{28:$VA,44:$VC}),o($VW,$VF),o($VW,$VH),o($VW,$Vx),{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,20:140,21:141,22:144,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{7:158,9:157,40:153,41:$V31,48:$Va,53:160,54:161,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf},{18:87,28:$V1,29:162,30:[1,163],31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,29:164,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,29:165,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($Vu,[2,64]),{28:$VA},{18:87,28:$V1,29:166,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:167,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($VO,[2,98]),{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,87:168,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,87:169,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,90:170,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,90:171,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,91:172,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,91:173,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,94:174,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,94:175,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,94:176,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,94:177,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,94:178,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,94:179,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($VW,[2,117]),{30:[1,180],82:$VL},{18:87,28:$V1,29:181,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{34:[1,182]},{34:[1,183]},{34:[1,184]},{34:[1,185]},{34:[1,186]},{34:[1,187]},{34:[1,188]},{18:87,28:$VZ,29:189,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,43:190,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{30:[1,192],40:193,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,63:191},{41:[1,194]},{42:[1,195]},o($V_,[2,50],{82:$VL}),{18:87,28:$V1,29:196,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{18:87,28:$V1,29:111,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:197,41:$VK,53:85,54:86,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{30:[1,198],62:$V41},o($V51,[2,66]),o($V61,[2,68],{82:$VL}),{45:[1,200]},{34:[1,201]},o($V_,[2,54]),o($V_,[2,55]),{30:[1,203],40:193,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,63:202},o($VJ,[2,85]),o($VJ,[2,86]),{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,21:205,22:144,25:204,26:$V71,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{30:[1,207],82:$VL},{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,20:208,21:141,22:144,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,21:210,22:144,26:[1,209],27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($V81,[2,18]),{8:211,60:$Vv},{8:212,60:$Vv},{8:213,60:$Vv},o($V81,[2,22]),o($V81,[2,23]),o($V81,[2,24]),o($V81,[2,25]),o($V81,[2,26]),{8:214,60:$Vv},{8:215,60:$Vv},o($Vw,$Vx,{8:216,60:$Vv}),{41:[1,217],44:$Vy},{60:[2,79]},{60:[2,80]},{60:[2,81]},{68:[1,218]},{68:[1,219]},{42:$VB,44:$VC,51:$VD,52:$VE},{42:$VG},{42:$VI},{30:[1,220],82:$VL},{60:[2,34]},{68:[1,221],82:$VL},o($VN,[2,94]),{30:[1,222],82:$VL},o($VO,[2,96]),o($VP,[2,100]),o($VP,[2,101]),o($VQ,[2,103]),o($VQ,[2,104]),o($VR,[2,106]),o($VR,[2,107]),o($V91,[2,109],{97:$VS,98:$VT,99:$VU,100:$VV}),o($V91,[2,110],{97:$VS,98:$VT,99:$VU,100:$VV}),o($Va1,[2,111],{100:$VV}),o($Va1,[2,112],{100:$VV}),o($Va1,[2,113],{100:$VV}),o($Va1,[2,114],{100:$VV}),o($VW,[2,118]),{30:[1,223],82:$VL},{30:[1,224]},{30:[1,225]},{30:[1,226]},{30:[1,227]},{30:[1,228]},{30:[1,229]},{30:[1,230]},o($Vb1,[2,44],{82:$VL}),{18:87,28:$V1,29:231,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{30:[1,232],62:$Vc1},{23:234,24:$V$},{41:[1,235]},{42:[1,236]},{46:[1,237]},o($V_,[2,51],{82:$VL}),{30:[1,238]},o($V51,[2,65]),{18:87,28:$V1,29:239,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($Vd1,[2,61]),{45:[1,240]},{30:[1,241],62:$Vc1},{23:242,24:$V$},o($Ve1,[2,30]),{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,21:205,22:144,25:243,26:$V71,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($Ve1,[2,32]),{24:[1,244]},{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,21:210,22:144,26:[1,245],27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{65:[1,246]},o($V81,[2,17]),o($V81,[2,19]),o($V81,[2,20]),o($V81,[2,21]),o($V81,[2,27]),o($V81,[2,28]),o($V81,[2,29]),o($Vb1,$VY,{42:$VX}),{34:[1,247]},{34:[1,248]},{60:[2,33]},{18:87,28:$V1,29:249,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{23:250,24:$V$},o($VW,[2,35]),o($VW,[2,36]),o($VW,[2,37]),o($VW,[2,38]),o($VW,[2,39]),o($VW,[2,40]),o($VW,[2,41]),o($VW,[2,42]),o($Vb1,[2,45],{82:$VL}),{23:251,24:$V$},{40:252,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf},o($Vu,[2,70]),o($Vf1,[2,74]),{24:[1,254],46:[1,253]},{48:[1,255]},o([28,32,33,35,36,37,38,39,41,86,96,102,103,104,105,106],[2,49]),o($V61,[2,67],{82:$VL}),{45:[1,256]},{23:257,24:$V$},o($Vu,[2,72]),o($Ve1,[2,31]),{78:258,79:259,80:[1,260],81:$Vg1},o($VJ,[2,75]),{28:[1,262]},{68:[1,263]},{68:[1,264]},{60:[2,82],82:$VL},o($Ve1,[2,87]),o($Vu,[2,69]),{41:[1,265]},{40:266,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf},{18:87,28:$V1,29:129,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,47:267,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{49:[1,268]},o($Vd1,[2,62]),o($Vu,[2,71]),{26:[1,269],79:270,80:[1,271],81:$Vg1},{26:[1,272]},{68:[1,273]},{68:[1,274]},{18:87,28:$V1,29:275,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{9:276,41:$V31,53:160,54:161},{9:277,41:$V31,53:160,54:161},o($Vf1,[2,73]),{44:[1,278]},{26:[1,279],62:$V41},{40:280,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf},o($VJ,[2,88]),{26:[1,281]},{68:[1,282]},o($VJ,[2,89]),{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,20:283,21:141,22:144,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,20:284,21:141,22:144,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{30:[1,285],82:$VL},{30:[1,286]},{30:[1,287]},{18:87,28:$V1,29:288,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$VK,53:85,54:86,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($Vb1,[2,47]),{50:[1,289]},o($VJ,[2,90]),{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,20:290,21:141,22:144,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($Vh1,[2,92],{53:20,54:21,73:23,29:29,83:37,85:38,87:40,90:41,91:42,94:43,101:44,31:52,7:142,9:143,22:144,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,40:153,21:210,27:$V0,28:$V1,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,48:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,76:$Vl,77:$Vm,86:$Vn,96:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] })":59},{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,21:210,22:144,26:[2,93],27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{8:291,60:$Vv},{24:[1,292]},{24:[1,293]},{45:[1,294],82:$VL},o($Vb1,[2,48]),o($Vh1,[2,91],{53:20,54:21,73:23,29:29,83:37,85:38,87:40,90:41,91:42,94:43,101:44,31:52,7:142,9:143,22:144,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,40:153,21:210,27:$V0,28:$V1,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,48:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,76:$Vl,77:$Vm,86:$Vn,96:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] })":59},o($VJ,[2,76]),{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,20:295,21:141,22:144,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,20:296,21:141,22:144,27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($Vb1,[2,46]),{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,21:210,22:144,26:[1,297],27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},{7:142,9:143,11:145,12:146,13:147,14:148,15:149,16:150,17:151,18:152,21:210,22:144,26:[1,298],27:$V0,28:$V1,29:29,31:52,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:153,41:$V9,48:$Va,53:20,54:21,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,65:$Vi,66:$Vj,67:$Vk,69:$V01,70:$V11,71:$V21,73:23,76:$Vl,77:$Vm,83:37,85:38,86:$Vn,87:40,90:41,91:42,94:43,96:$Vo,101:44,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,"function toString() { [native code] }":59},o($VJ,[2,77]),o($VJ,[2,78])],
defaultActions: {3:[2,2],61:[2,1],154:[2,79],155:[2,80],156:[2,81],163:[2,34],220:[2,33]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios
break;
case 1://Comentario
break;
case 2://Comentario bloque
break;
case 3:return 95;
break;
case 4:return 51;
break;
case 5:return 96;
break;
case 6:return 52;
break;
case 7:return 97;
break;
case 8:return 98;
break;
case 9:return 100;
break;
case 10:return 99;
break;
case 11:return 42;
break;
case 12:return 88;
break;
case 13:return 86;
break;
case 14:return 89;
break;
case 15:return 49;
break;
case 16:return 93;
break;
case 17:return 50;
break;
case 18:return 92;
break;
case 19:return 72;
break;
case 20:return 68;
break;
case 21:return 60;
break;
case 22:return 84;
break;
case 23:return 82;
break;
case 24:return 28;
break;
case 25:return 30;
break;
case 26:return 24;
break;
case 27:return 26;
break;
case 28:return 62;
break;
case 29:return 100;
break;
case 30:return 44;
break;
case 31:return 45;
break;
case 32:return 55;
break;
case 33:return 57;
break;
case 34:return 'tbool';
break;
case 35:return 59;
break;
case 36:return 48;
break;
case 37:return 56;
break;
case 38:return 27;
break;
case 39:return 105;
break;
case 40:return 106;
break;
case 41:return 76;
break;
case 42:return 75;
break;
case 43:return 67;
break;
case 44:return 65;
break;
case 45:return 77;
break;
case 46:return 80;
break;
case 47:return 81;
break;
case 48:return 'has';
break;
case 49:return 61;
break;
case 50:return 64;
break;
case 51:return 69;
break;
case 52:return 46;
break;
case 53:return 71;
break;
case 54:return 70;
break;
case 55:return 32;
break;
case 56:return 33;
break;
case 57:return 35;
break;
case 58:return 36;
break;
case 59:return 37;
break;
case 60:return 38;
break;
case 61:return 'acadena';
break;
case 62:return 'aarreglo';
break;
case 63:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return'caracter';
break;
case 64:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return'cadena';
break;
case 65:return 102;
break;
case 66:return 41;
break;
case 67:return 5;
break;
case 68:console.log('Error léxico: '+yy_.yytext+', en la línea: '+yy_.yylloc.first_line+'; columna: '+yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\\.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\^)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:list\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:exec\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:'[[a-zA-Z0-9]|[\\]|[\\\']|[\\\"]|[\\n]|[\\t]|[\\r]')/i,/^(?:"[[^\"]|[\\\""]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z_])(azAZ09_)*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}