/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,15],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,27],$Vb=[1,17],$Vc=[5,23,37,42,43,44,45,46,60,61,62,72,73],$Vd=[1,32],$Ve=[1,31],$Vf=[2,5,22,23,37,42,43,44,45,46,60,61,62,63,64,65,72,73,76,77],$Vg=[1,45],$Vh=[2,5,22,23,37,42,43,44,45,46,60,61,62,63,64,65,71,72,73,76,77],$Vi=[2,51],$Vj=[1,55],$Vk=[1,61],$Vl=[1,51],$Vm=[1,54],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,62],$Vs=[1,63],$Vt=[2,26,51],$Vu=[1,72],$Vv=[1,71],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[1,91],$VA=[1,92],$VB=[1,93],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,104],$VN=[2,26,51,68,78,79,81,82,83,84,85,86,88,89,90,91,92,93],$VO=[2,22,23,37,42,43,44,45,46,60,61,62,63,64,65,72,73,76,77],$VP=[2,26,51,68,78,79],$VQ=[2,26,51,68,78,79,81,82,83,84,85,86,88,89],$VR=[2,26,51,68,78,79,81,82],$VS=[2,26,51,68,78,79,81,82,83,84,85,86],$VT=[2,26,51,68,78,79,81,82,83,84,85,86,88,89,90,91,92],$VU=[1,145],$VV=[1,163],$VW=[22,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"GLOBALES":4,"EOF":5,"GLOBAL":6,"SYNC":7,"DECLARACION":8,"ASIGNACION":9,"IF":10,"SWITCH":11,"WHILE":12,"DOWHILE":13,"FOR":14,"PRINT":15,"INSTRUCCIONES":16,"INSTRUCCION":17,"TRANSFERENCIA":18,"BLOQUE":19,"llavea":20,"BLOQUE2":21,"llavec":22,"print":23,"parena":24,"EXPRL":25,"parenc":26,"NATIVA":27,"minusculas":28,"mayusculas":29,"tamanio":30,"truncar":31,"redondear":32,"typeOf":33,"acadena":34,"aarreglo":35,"TYPE":36,"id":37,"igual":38,"CASTEO":39,"incremento":40,"decremento":41,"tint":42,"tstring":43,"tdouble":44,"tbool":45,"tchar":46,"ACCESOVECTOR":47,"corchetea":48,"corchetec":49,"ACCESOLISTA":50,"ptcoma":51,"MAIN":52,"ex":53,"LLAMADA":54,"LISTAVALORES":55,"coma":56,"FUNCION":57,"PARAM":58,"tmethod":59,"mientras":60,"has":61,"para":62,"retorno":63,"continuar":64,"romper":65,"OPTERNARIO":66,"interrog":67,"dospt":68,"IFSOLO":69,"ELSE":70,"sino":71,"si":72,"fswitch":73,"CASES":74,"DEFAULT":75,"caso":76,"defecto":77,"ologico":78,"ylogico":79,"exclamacion":80,"equals":81,"diferente":82,"menor":83,"mayor":84,"mayorigual":85,"menorigual":86,"EXP2":87,"mas":88,"menos":89,"por":90,"dividido":91,"modulo":92,"elevado":93,"EXPVAL":94,"NUM":95,"cadena":96,"caracter":97,"vtrue":98,"vfalse":99,"entero":100,"decimal":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"llavea",22:"llavec",23:"print",24:"parena",26:"parenc",28:"minusculas",29:"mayusculas",30:"tamanio",31:"truncar",32:"redondear",33:"typeOf",34:"acadena",35:"aarreglo",37:"id",38:"igual",40:"incremento",41:"decremento",42:"tint",43:"tstring",44:"tdouble",45:"tbool",46:"tchar",48:"corchetea",49:"corchetec",51:"ptcoma",53:"ex",56:"coma",59:"tmethod",60:"mientras",61:"has",62:"para",63:"retorno",64:"continuar",65:"romper",67:"interrog",68:"dospt",71:"sino",72:"si",73:"fswitch",76:"caso",77:"defecto",78:"ologico",79:"ylogico",80:"exclamacion",81:"equals",82:"diferente",83:"menor",84:"mayor",85:"mayorigual",86:"menorigual",88:"mas",89:"menos",90:"por",91:"dividido",92:"modulo",93:"elevado",96:"cadena",97:"caracter",98:"vtrue",99:"vfalse",100:"entero",101:"decimal"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[16,2],[16,1],[16,2],[17,2],[17,2],[17,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,2],[19,2],[21,2],[21,1],[21,2],[15,4],[15,3],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[8,2],[8,4],[39,4],[9,3],[9,2],[9,2],[36,1],[36,1],[36,1],[36,1],[36,1],[47,4],[50,6],[7,1],[7,1],[52,2],[54,4],[54,3],[55,3],[55,1],[57,6],[57,5],[57,6],[57,5],[58,4],[58,2],[12,5],[13,7],[14,9],[14,9],[18,1],[18,1],[18,1],[66,5],[10,1],[10,2],[70,2],[70,2],[69,5],[11,7],[11,7],[11,8],[74,5],[74,4],[75,3],[25,3],[25,3],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,1],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,1],[94,2],[94,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[95,1],[95,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:

      var p = program
      program = new Global()
      p.ejecutar()
      return p;
   
break;
case 3: case 4:
program.instrucciones.push($$[$0]);
break;
case 5: case 16: case 29: case 54:
program.newError(Type.SINTACTICO, "No se esperaba: " + this.$, this._$.first_line, this._$.first_column)
break;
case 6: case 7: case 13: case 103:
this.$ = $$[$0-1]
break;
case 8: case 20:
this.$ = new If($$[$0],this._$.first_line, this._$.first_column);
break;
case 9: case 10: case 11: case 12: case 94: case 101:
this.$ = $$[$0]
break;
case 14:
this.$=$$[$0].unshift($$[$0-1]); this.$ = $$[$0];
break;
case 15:
this.$=[$$[$0]]
break;
case 17: case 18: case 19: case 25:
this.$ = $$[$0-1];
break;
case 21: case 22: case 23: case 24: case 77:
this.$ = $$[$0];
break;
case 26:
this.$= new Bloque($$[$0], this._$.first_line, this._$.first_column);
break;
case 27:
$$[$0].unshift($$[$0-1]); this.$ = $$[$0];
break;
case 28:
this.$=[];
break;
case 30:
this.$ = new Print($$[$0-1], Type.PRINT, Type.PRINT, this._$.first_line, this._$.first_column);
break;
case 31:
this.$ = new Print(null, Type.PRINT, Type.PRINT, this._$.first_line, this._$.first_column);
break;
case 40:
this.$ = new Declaracion($$[$0], null, $$[$0-1], Type.DECLARACION, this._$.first_line, this._$.first_column)
break;
case 41:
this.$ = new Declaracion($$[$0-2], $$[$0], $$[$0-3], Type.DECLARACION, this._$.first_line, this._$.first_column)
break;
case 43:
this.$ = new Asignacion($$[$0-2], $$[$0], Type.ASIGNACION, this._$.first_line, this._$.first_column)
break;
case 44:
this.$ = new Asignacion($$[$0-1], null, Type.INCREMENTO, this._$.first_line, this._$.first_column)
break;
case 45:
this.$ = new Asignacion($$[$0-1], null, Type.DECREMENTO, this._$.first_line, this._$.first_column)
break;
case 46:
this.$ = Type.INT;
break;
case 47:
this.$ = Type.STRING;
break;
case 48:
this.$ = Type.DOUBLE;
break;
case 49:
this.$ = Type.BOOLEAN;
break;
case 50:
this.$ = Type.CHAR;
break;
case 66:
this.$ = new While($$[$0-2], $$[$0], this._$.first_line, this._$.first_column)
break;
case 67:
this.$ = new DoWhile($$[$0-2], $$[$0-5], this._$.first_line, this._$.first_column)
break;
case 68: case 69:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],this._$.first_line, this._$.first_column)
break;
case 71:
this.$ = new Control(Type.CONTINUE,Type.CONTROL, this._$.first_line, this._$.first_column)
break;
case 72:
this.$ = new Control(Type.BREAK,Type.CONTROL, this._$.first_line, this._$.first_column)
break;
case 74:
this.$=$$[$0];
break;
case 75:
$$[$0-1].push(...$$[$0]);
break;
case 76:
this.$ = [{exp: null, block: $$[$0]}];
break;
case 78:
this.$ = [{exp: $$[$0-2], block: $$[$0]}];
break;
case 79:
this.$ = new Switch($$[$0-4], $$[$0-1], null, this._$.first_line, this._$.first_column)
break;
case 80:
this.$ = new Switch($$[$0-4], null, $$[$0-1], this._$.first_line, this._$.first_column)
break;
case 81:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column)
break;
case 82:
$$[$0-4].push({exp:$$[$0-2], block:new Bloque($$[$0], this._$.first_line, this._$.first_column)})
break;
case 83:
this.$ = [{exp: $$[$0-2], block: new Bloque($$[$0], this._$.first_line, this._$.first_column)}]
break;
case 84:
this.$ = new Bloque($$[$0], this._$.first_line, this._$.first_column)
break;
case 85:
this.$ = new Logica($$[$0-2], $$[$0], Type.OR, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 86:
this.$ = new Logica($$[$0-2], $$[$0], Type.AND, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 87:
this.$ = new Unitaria($$[$0], Type.NOT, Type.UNITARIA, this._$.first_line, this._$.first_column);
break;
case 88:
this.$ = new Logica($$[$0-2], $$[$0], Type.IGUAL, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 89:
this.$ = new Logica($$[$0-2], $$[$0], Type.DIFERENTE, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 90:
this.$ = new Logica($$[$0-2], $$[$0], Type.MENOR, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 91:
this.$ = new Logica($$[$0-2], $$[$0], Type.MAYOR, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 92:
this.$ = new Logica($$[$0-2], $$[$0], Type.MAYORIGUAL, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 93:
this.$ = new Logica($$[$0-2], $$[$0], Type.MENORIGUAL, Type.LOGICO, this._$.first_line, this._$.first_column);
break;
case 95:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.SUMA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 96:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.RESTA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 97:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.MULTIPLICACION, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 98:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.DIVISION, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 99:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.MODULO, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 100:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.POTENCIA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 102:
this.$ = new Unitaria($$[$0], Type.NEGACION, Type.UNITARIA, this._$.first_line, this._$.first_column);
break;
case 104:
this.$ = new Value($$[$0].value, $$[$0].type, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 105:
this.$ = new Value(String($$[$0]), Type.STRING, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 106:
this.$ = new Value(String($$[$0]), Type.CHAR, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 107:
this.$ = new Value(true, Type.BOOLEAN, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 108:
this.$ = new Value(false, Type.BOOLEAN, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 109:
this.$ = new Symbol($$[$0], null, Type.SYMBOL, Type.VALOR, this._$.first_line, this._$.first_column );
break;
case 110:
this.$ = new Value(parseInt($$[$0]), Type.INT, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 111:
this.$ =new Value(parseFloat($$[$0]), Type.DOUBLE, Type.VALOR, this._$.first_line, this._$.first_column);
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,23:$V0,36:14,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6,60:$V7,61:$V8,62:$V9,69:16,72:$Va,73:$Vb},{1:[3]},{5:[1,28],6:29,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,23:$V0,36:14,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6,60:$V7,61:$V8,62:$V9,69:16,72:$Va,73:$Vb},{1:[2,2]},o($Vc,[2,4]),{2:$Vd,7:30,51:$Ve},{2:$Vd,7:33,51:$Ve},{2:$Vd,7:34,51:$Ve},o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{2:$Vd,7:35,51:$Ve},{37:[1,36]},{38:[1,37],40:[1,38],41:[1,39]},o($Vf,[2,74],{70:40,71:[1,41]}),{24:[1,42]},{24:[1,43]},{19:44,20:$Vg},{24:[1,46]},{24:[1,47]},{37:[2,46]},{37:[2,47]},{37:[2,48]},{37:[2,49]},{37:[2,50]},{24:[1,48]},{1:[2,1]},o($Vc,[2,3]),o($Vc,[2,5]),o($Vh,[2,53]),o($Vh,[2,54]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,13]),o($Vi,[2,40],{38:[1,49]}),{24:$Vj,25:50,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},o($Vt,[2,44]),o($Vt,[2,45]),o($Vf,[2,75]),{10:65,19:64,20:$Vg,69:16,72:$Va},{24:$Vj,25:66,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:67,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{60:[1,68]},{2:$Vu,8:73,9:74,10:76,11:77,12:78,13:79,14:80,15:81,17:70,18:75,21:69,22:$Vv,23:$V0,36:14,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6,60:$V7,61:$V8,62:$V9,63:$Vw,64:$Vx,65:$Vy,69:16,72:$Va,73:$Vb},{8:86,9:85,36:14,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6},{24:$Vj,25:87,26:[1,88],37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:89,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:90,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},o($Vt,[2,43],{78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),{24:$Vj,25:105,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},o($VN,[2,94]),o($VN,[2,101]),{24:$Vj,25:106,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:107,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},o($VN,[2,104]),o($VN,[2,105]),o($VN,[2,106]),o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,109]),o($VN,[2,110]),o($VN,[2,111]),o($Vf,[2,76]),o($Vf,[2,77]),{26:[1,108],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{26:[1,109],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{24:[1,110]},o($Vh,[2,26]),{2:$Vu,8:73,9:74,10:76,11:77,12:78,13:79,14:80,15:81,17:70,18:75,21:111,22:$Vv,23:$V0,36:14,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6,60:$V7,61:$V8,62:$V9,63:$Vw,64:$Vx,65:$Vy,69:16,72:$Va,73:$Vb},o($Vh,[2,28]),{2:$Vd,7:112,51:$Ve},{2:$Vd,7:113,51:$Ve},{2:$Vd,7:114,51:$Ve},{2:$Vd,7:115,51:$Ve},o($VO,[2,20]),o($VO,[2,21]),o($VO,[2,22]),o($VO,[2,23]),o($VO,[2,24]),{2:$Vd,7:116,51:$Ve},o($Vi,[2,70]),o($Vi,[2,71]),o($Vi,[2,72]),{51:[1,117]},{51:[1,118]},{26:[1,119],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($Vi,[2,31]),{26:[1,120],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($Vi,[2,41],{78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),{24:$Vj,25:121,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:122,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:123,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:124,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:125,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:126,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:127,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:128,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:129,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:130,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:131,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:132,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:133,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:134,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},o($VP,[2,87],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VQ,[2,102],{90:$VJ,91:$VK,92:$VL,93:$VM}),{26:[1,135],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{20:[1,136]},{19:137,20:$Vg},{24:$Vj,25:138,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},o($Vh,[2,27]),o($Vh,[2,29]),o($VO,[2,17]),o($VO,[2,18]),o($VO,[2,19]),o($VO,[2,25]),{24:$Vj,25:139,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{24:$Vj,25:140,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},o($Vi,[2,30]),{19:141,20:$Vg},o([2,26,51,68,78],[2,85],{79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VP,[2,86],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VR,[2,88],{83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VR,[2,89],{83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VS,[2,90],{88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VS,[2,91],{88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VS,[2,92],{88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VS,[2,93],{88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM}),o($VQ,[2,95],{90:$VJ,91:$VK,92:$VL,93:$VM}),o($VQ,[2,96],{90:$VJ,91:$VK,92:$VL,93:$VM}),o($VT,[2,97],{93:$VM}),o($VT,[2,98],{93:$VM}),o($VT,[2,99],{93:$VM}),o($VT,[2,100],{93:$VM}),o($VN,[2,103]),{74:142,75:143,76:[1,144],77:$VU},o($Vf,[2,66]),{26:[1,146],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{51:[1,147],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{51:[1,148],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($Vh,[2,78]),{22:[1,149],75:150,76:[1,151],77:$VU},{22:[1,152]},{24:$Vj,25:153,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},{68:[1,154]},{2:$Vd,7:155,51:$Ve},{9:156,37:$V1},{9:157,37:$V1},o($Vf,[2,79]),{22:[1,158]},{24:$Vj,25:159,37:$Vk,80:$Vl,87:52,89:$Vm,94:53,95:56,96:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs},o($Vf,[2,80]),{68:[1,160],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{2:$VV,8:73,9:74,10:76,11:77,12:78,13:79,14:80,15:81,16:161,17:162,18:75,23:$V0,36:14,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6,60:$V7,61:$V8,62:$V9,63:$Vw,64:$Vx,65:$Vy,69:16,72:$Va,73:$Vb},o($Vf,[2,67]),{26:[1,164]},{26:[1,165]},o($Vf,[2,81]),{68:[1,166],78:$Vz,79:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{2:$VV,8:73,9:74,10:76,11:77,12:78,13:79,14:80,15:81,16:167,17:162,18:75,23:$V0,36:14,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6,60:$V7,61:$V8,62:$V9,63:$Vw,64:$Vx,65:$Vy,69:16,72:$Va,73:$Vb},{22:[2,84]},o($VW,[2,15],{36:14,69:16,8:73,9:74,18:75,10:76,11:77,12:78,13:79,14:80,15:81,17:162,16:168,2:$VV,23:$V0,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6,60:$V7,61:$V8,62:$V9,63:$Vw,64:$Vx,65:$Vy,72:$Va,73:$Vb}),{2:$Vd,7:169,51:$Ve},{19:170,20:$Vg},{19:171,20:$Vg},{2:$VV,8:73,9:74,10:76,11:77,12:78,13:79,14:80,15:81,16:172,17:162,18:75,23:$V0,36:14,37:$V1,42:$V2,43:$V3,44:$V4,45:$V5,46:$V6,60:$V7,61:$V8,62:$V9,63:$Vw,64:$Vx,65:$Vy,69:16,72:$Va,73:$Vb},o($VW,[2,83]),o($VW,[2,14]),o($VW,[2,16]),o($Vf,[2,68]),o($Vf,[2,69]),o($VW,[2,82])],
defaultActions: {3:[2,2],22:[2,46],23:[2,47],24:[2,48],25:[2,49],26:[2,50],28:[2,1],161:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

   const Value = require('../clases/Value.js')
   const Type = require('../clases/Type.js')
   const Global = require('../clases/Global.js')
   const Print = require('../clases/Print.js')
   const Aritmetica = require('../clases/Aritmetica.js')
   const Unitaria = require('../clases/Unitaria.js')
   const Logica = require('../clases/Logica.js')
   const Declaracion = require('../clases/Declaracion.js')
   const Symbol = require('../clases/Symbol.js')
   const Asignacion = require('../clases/Asignacion.js')
   const If = require('../clases/If.js')
   const Bloque = require('../clases/Bloque.js')
   const While = require('../clases/While.js')
   const DoWhile = require('../clases/DoWhile.js')
   const For = require('../clases/For.js')
   const Control = require('../clases/Control.js')
   const Switch = require('../clases/Switch.js')
   var program = new Global()
   var cadena ='';
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 40;
break;
case 4:return 88;
break;
case 5:return 41;
break;
case 6:return 89;
break;
case 7:return 90;
break;
case 8:return 91;
break;
case 9:return 93;
break;
case 10:return 92;
break;
case 11:return 81;
break;
case 12:return 38;
break;
case 13:return 82;
break;
case 14:return 80;
break;
case 15:return 85;
break;
case 16:return 86;
break;
case 17:return 83;
break;
case 18:return 84;
break;
case 19:return 67;
break;
case 20:return 68;
break;
case 21:return 51;
break;
case 22:return 79;
break;
case 23:return 78;
break;
case 24:return 24;
break;
case 25:return 26;
break;
case 26:return 20;
break;
case 27:return 22;
break;
case 28:return 56;
break;
case 29:return 93;
break;
case 30:return 48;
break;
case 31:return 49;
break;
case 32:return 42;
break;
case 33:return 44;
break;
case 34:return 45;
break;
case 35:return 46;
break;
case 36:return 'tlista';
break;
case 37:return 43;
break;
case 38:return 23;
break;
case 39:return 98;
break;
case 40:return 99;
break;
case 41:return 72;
break;
case 42:return 71;
break;
case 43:return 62;
break;
case 44:return 60;
break;
case 45:return 73;
break;
case 46:return 76;
break;
case 47:return 77;
break;
case 48:return 61;
break;
case 49:return 53;
break;
case 50:return 59;
break;
case 51:return 63;
break;
case 52:return 'nuevo';
break;
case 53:return 65;
break;
case 54:return 64;
break;
case 55:return 28;
break;
case 56:return 29;
break;
case 57:return 30;
break;
case 58:return 31;
break;
case 59:return 32;
break;
case 60:return 33;
break;
case 61:return 34;
break;
case 62:return 35;
break;
case 63:return 101;
break;
case 64:return 100;  
break;
case 65:yy_.yytext = yy_.yytext.toUpperCase();return 37;
break;
case 66:cadena = '';this.begin("str");
break;
case 67:cadena += yy_.yytext;
break;
case 68:cadena += '\"';
break;
case 69:cadena += '\n';
break;
case 70:cadena += '\t';
break;
case 71:cadena += '\\';
break;
case 72:cadena += '\'';
break;
case 73:yy_.yytext = cadena; this.popState(); return 96
break;
case 74:cadena=''; this.popState();program.newError(
                                                         Type.LEXICO, 'El símbolo: '+cadena+', no se pudo'+
                                                         ' reconocer.', yy_.yylloc.first_line, yy_.yylloc.first_column)
break;
case 75:yy_.yytext = yy_.yytext.substring(1,yy_.yytext.length-1); 
                                                         yy_.yytext = yy_.yytext.replace(/\\n/g, '\n')
                                                         yy_.yytext = yy_.yytext.replace(/\\r/g, '\r')
                                                         yy_.yytext = yy_.yytext.replace(/\\t/g, '\t')
                                                         yy_.yytext = yy_.yytext.replace(/\\\'/g, '\'')
                                                         yy_.yytext = yy_.yytext.replace(/\\\"/g, '\"')
                                                         yy_.yytext = yy_.yytext.replace(/\\\\/g, '\\')
                                                         return'caracter';
break;
case 76:return 5;
break;
case 77:program.newError(Type.LEXICO, 'El símbolo: '+yy_.yytext+', no se pudo'+
                                                ' reconocer.', yy_.yylloc.first_line, yy_.yylloc.first_column)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\^)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:list\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:exec\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:([0-9])+)/i,/^(?:([a-zA-Z_ñÑ])([a-z0-9A-Z_ñÑ])*)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:.)/i,/^(?:[\'](\\n|\\r|\\t|\\'|\\"|\\\\|[^\'])[\'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"str":{"rules":[67,68,69,70,71,72,73,74],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}