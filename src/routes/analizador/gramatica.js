/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,29],$V2=[1,43],$V3=[1,51],$V4=[1,52],$V5=[1,53],$V6=[1,54],$V7=[1,55],$V8=[1,56],$V9=[1,57],$Va=[1,58],$Vb=[1,20],$Vc=[1,19],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,31],$Vj=[1,23],$Vk=[1,26],$Vl=[1,27],$Vm=[1,28],$Vn=[1,37],$Vo=[1,25],$Vp=[1,38],$Vq=[1,41],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,49],$Vw=[1,50],$Vx=[2,5,27,28,32,33,34,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,76,77,84,91,98,99,100,101,102,103],$Vy=[1,62],$Vz=[49,50,72,82,83,85,86,87,88,90,91,92,93,94,95],$VA=[2,123],$VB=[1,70],$VC=[2,119],$VD=[1,75],$VE=[1,72],$VF=[1,76],$VG=[1,73],$VH=[1,74],$VI=[2,120],$VJ=[1,77],$VK=[2,121],$VL=[1,78],$VM=[2,5,26,27,28,32,33,34,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,69,70,71,76,77,80,81,84,91,98,99,100,101,102,103],$VN=[1,85],$VO=[1,93],$VP=[1,94],$VQ=[1,89],$VR=[1,90],$VS=[1,91],$VT=[1,92],$VU=[1,95],$VV=[1,96],$VW=[30,41,44,50],$VX=[1,101],$VY=[26,30,45,49,50,60,62,68,72,82,83,85,86,87,88],$VZ=[1,107],$V_=[1,108],$V$=[1,109],$V01=[1,110],$V11=[26,30,45,49,50,60,62,68,72,82,83,85,86,87,88,90,91,92,93,94,95],$V21=[1,121],$V31=[2,44],$V41=[1,127],$V51=[30,60,68],$V61=[1,143],$V71=[1,156],$V81=[1,157],$V91=[1,158],$Va1=[1,161],$Vb1=[26,30,45,60,62,68,72,82,83],$Vc1=[1,201],$Vd1=[26,30,62],$Ve1=[2,5,26,27,28,32,33,34,35,36,37,38,39,41,48,55,56,57,58,59,61,64,65,66,67,69,70,71,75,76,77,80,81,84,91,98,99,100,101,102,103],$Vf1=[26,27,28,32,33,34,35,36,37,38,39,41,48,55,56,57,58,59,65,66,67,69,70,71,76,77,80,81,84,91,98,99,100,101,102,103],$Vg1=[26,30,45,60,62,68,72,82,83,85,86],$Vh1=[26,30,45,49,50,60,62,68,72,82,83,85,86,87,88,90,91],$Vi1=[26,30,45,49,50,60,62,68,72,82,83,85,86,87,88,90,91,92,93,94],$Vj1=[60,68],$Vk1=[1,232],$Vl1=[26,30,42,45,49,50,60,62,68,72,82,83,85,86,87,88,90,91,92,93,94,95],$Vm1=[30,62],$Vn1=[1,259],$Vo1=[26,80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"GLOBALES":4,"EOF":5,"GLOBAL":6,"DECLARACION":7,"SYNC":8,"ASIGNACION":9,"FUNCION":10,"IF":11,"SWITCH":12,"WHILE":13,"DOWHILE":14,"FOR":15,"PRINT":16,"OPTERNARIO":17,"LLAMADA":18,"MAIN":19,"INSTRUCCIONES":20,"INSTRUCCION":21,"TRANSFERENCIA":22,"BLOQUE":23,"llavea":24,"BLOQUE2":25,"llavec":26,"print":27,"parena":28,"EXPRL":29,"parenc":30,"NATIVA":31,"minusculas":32,"mayusculas":33,"tamanio":34,"truncar":35,"redondear":36,"typeOf":37,"acadena":38,"aarreglo":39,"TYPE":40,"id":41,"igual":42,"CASTEO":43,"corchetea":44,"corchetec":45,"nuevo":46,"LISTAVALORES":47,"tlista":48,"menor":49,"mayor":50,"incremento":51,"decremento":52,"ACCESOVECTOR":53,"ACCESOLISTA":54,"tint":55,"tstring":56,"tdouble":57,"tboolean":58,"tchar":59,"ptcoma":60,"ex":61,"coma":62,"PARAM":63,"tmethod":64,"mientras":65,"do":66,"para":67,"dospt":68,"retorno":69,"continuar":70,"romper":71,"interrog":72,"IFSOLO":73,"ELSE":74,"sino":75,"si":76,"fswitch":77,"CASES":78,"DEFAULT":79,"caso":80,"defecto":81,"ologico":82,"ylogico":83,"exclamacion":84,"equals":85,"diferente":86,"mayorigual":87,"menorigual":88,"EXP2":89,"mas":90,"menos":91,"por":92,"dividido":93,"modulo":94,"elevado":95,"EXPVAL":96,"NUM":97,"cadena":98,"caracter":99,"vtrue":100,"vfalse":101,"entero":102,"decimal":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",24:"llavea",26:"llavec",27:"print",28:"parena",30:"parenc",32:"minusculas",33:"mayusculas",34:"tamanio",35:"truncar",36:"redondear",37:"typeOf",38:"acadena",39:"aarreglo",41:"id",42:"igual",44:"corchetea",45:"corchetec",46:"nuevo",48:"tlista",49:"menor",50:"mayor",51:"incremento",52:"decremento",55:"tint",56:"tstring",57:"tdouble",58:"tboolean",59:"tchar",60:"ptcoma",61:"ex",62:"coma",64:"tmethod",65:"mientras",66:"do",67:"para",68:"dospt",69:"retorno",70:"continuar",71:"romper",72:"interrog",75:"sino",76:"si",77:"fswitch",80:"caso",81:"defecto",82:"ologico",83:"ylogico",84:"exclamacion",85:"equals",86:"diferente",87:"mayorigual",88:"menorigual",90:"mas",91:"menos",92:"por",93:"dividido",94:"modulo",95:"elevado",98:"cadena",99:"caracter",100:"vtrue",101:"vfalse",102:"entero",103:"decimal"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[20,2],[20,1],[21,2],[21,2],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,2],[21,2],[23,2],[25,2],[25,1],[16,4],[16,3],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[7,2],[7,4],[7,5],[7,10],[7,8],[7,9],[43,3],[9,3],[9,4],[9,2],[9,2],[9,3],[9,3],[40,1],[40,1],[40,1],[40,1],[40,1],[53,4],[54,6],[8,1],[19,2],[18,4],[18,3],[47,3],[47,1],[10,6],[10,5],[10,6],[10,5],[63,4],[63,2],[13,5],[14,7],[15,11],[15,11],[22,1],[22,1],[22,1],[17,5],[11,1],[11,2],[74,2],[74,2],[73,5],[12,7],[12,7],[12,8],[78,4],[78,3],[79,3],[29,3],[29,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[89,3],[89,3],[89,3],[89,3],[89,3],[89,3],[89,1],[96,2],[96,1],[96,3],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[97,1],[97,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      var p = program
      program = new Global()
      p.ejecutar()
      return p;
   
break;
case 13:
program.instrucciones.push($$[$0-1])
break;
case 34:
this.$ = new Print($$[$0-1], null, Type.PRINT, this._$.first_line, this._$.first_column);
break;
case 35:
this.$ = new Print(null, null, Type.PRINT, this._$.first_line, this._$.first_column);
break;
case 105:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.SUMA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 106:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.RESTA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 107:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.MULTIPLICACION, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 108:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.DIVISION, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 109:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.MODULO, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 110:
this.$ = new Aritmetica($$[$0-2], $$[$0], Type.POTENCIA, Type.ARITMETICO, this._$.first_line, this._$.first_column);
break;
case 113:
this.$ = new Value($$[$0].value, $$[$0].type, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 115:
this.$ = new Value(String($$[$0]), Type.STRING, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 116:
this.$ = new Value(String($$[$0]), Type.CHAR, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 117:
this.$ = new Value(true, Type.BOOLEAN, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 118:
this.$ = new Value(false, Type.BOOLEAN, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 119:
console.log($$[$0]);
break;
case 124:
this.$ = new Value(parseInt($$[$0]), Type.INT, Type.VALOR, this._$.first_line, this._$.first_column);
break;
case 125:
this.$ =new Value(parseFloat($$[$0]), Type.DOUBLE, Type.VALOR, this._$.first_line, this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:18,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,61:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{1:[3]},{2:$V0,5:[1,59],6:60,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:18,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,61:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{1:[2,2]},o($Vx,[2,4]),{8:61,60:$Vy},{8:63,60:$Vy},o($Vx,[2,7]),o($Vx,[2,8]),o($Vx,[2,9]),o($Vx,[2,10]),o($Vx,[2,11]),o($Vx,[2,12]),{8:64,60:$Vy},{8:65,60:$Vy},o($Vz,$VA,{8:66,60:$Vy}),{8:67,60:$Vy},{8:68,60:$Vy},{41:[1,69],44:$VB},{40:71,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($Vz,$VC,{28:$VD,42:$VE,44:$VF,51:$VG,52:$VH}),o($Vz,$VI,{42:$VJ}),o($Vz,$VK,{42:$VL}),{41:[1,79]},o($VM,[2,84],{74:80,75:[1,81]}),{28:[1,82]},{28:[1,83]},{23:84,24:$VN},{28:[1,86]},{28:[1,87]},{49:$VO,50:$VP,72:[1,88],82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{18:97,41:[1,98]},o($VW,[2,57]),o($VW,[2,58]),o($VW,[2,59]),o($VW,[2,60]),o($VW,[2,61]),{28:[1,99]},{18:104,28:$V2,29:100,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($VY,[2,104],{90:[1,105],91:[1,106],92:$VZ,93:$V_,94:$V$,95:$V01}),o($V11,[2,111]),{18:104,28:$V2,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,91:$Vq,96:111,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($V11,[2,113]),{18:104,28:$V2,29:112,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($V11,[2,115]),o($V11,[2,116]),o($V11,[2,117]),o($V11,[2,118]),o($V11,[2,122]),o($V11,[2,124]),o($V11,[2,125]),{28:[1,113]},{28:[1,114]},{28:[1,115]},{28:[1,116]},{28:[1,117]},{28:[1,118]},{28:[1,119]},{28:[1,120]},{1:[2,1]},o($Vx,[2,3]),o($Vx,[2,5]),o($VM,[2,64]),o($Vx,[2,6]),o($Vx,[2,13]),o($Vx,[2,14]),o($Vx,[2,15]),o($Vx,[2,16]),o($Vx,[2,17]),{28:[1,122],42:$V21,60:$V31},{45:[1,123]},{41:[1,124]},{18:104,28:$V41,29:125,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,43:126,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($V51,[2,53]),o($V51,[2,54]),{18:104,28:$V2,29:130,30:[1,129],31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,47:128,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:131,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,44:[1,132],53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:133,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:134,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{28:[1,135]},o($VM,[2,85]),{11:137,23:136,24:$VN,73:24,76:$Vn},{18:104,28:$V2,29:138,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:139,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{65:[1,140]},{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,21:142,22:146,25:141,26:$V61,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{7:160,9:159,40:155,41:$Va1,48:$Vc,53:162,54:163,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{18:104,28:$V2,29:164,30:[1,165],31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:166,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:167,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:168,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:169,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:170,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:171,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:172,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:173,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:174,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{60:[2,65]},{28:$VD},{18:104,28:$V2,29:175,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($Vb1,[2,97],{49:$VO,50:$VP,85:$VS,86:$VT,87:$VU,88:$VV}),o($V11,$VC,{28:$VD,44:$VF}),o($V11,$VI),o($V11,$VK),o($V11,$VA),{18:104,28:$V2,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,89:176,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,89:177,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,89:178,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,89:179,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,89:180,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,89:181,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($V11,[2,112]),{30:[1,182],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{18:104,28:$V2,29:183,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:184,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:185,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:186,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:187,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:188,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:189,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:190,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V41,29:191,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,43:192,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{30:[1,194],40:195,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,63:193},{41:[1,196]},{42:[1,197]},o($V51,[2,51],{49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),{18:104,28:$V2,29:198,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:112,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:199,41:$VX,53:102,54:103,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{30:[1,200],62:$Vc1},o($V11,[2,67]),o($Vd1,[2,69],{49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),{45:[1,202],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{18:104,28:$V2,29:203,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($V51,[2,55],{49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),o($V51,[2,56],{49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),{30:[1,205],40:195,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,63:204},o($VM,[2,86]),o($VM,[2,87]),{30:[1,206],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,207],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{28:[1,208]},o($Ve1,[2,31]),{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,21:142,22:146,25:209,26:$V61,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($Ve1,[2,33]),{8:210,60:$Vy},{8:211,60:$Vy},{8:212,60:$Vy},o($Vf1,[2,23]),o($Vf1,[2,24]),o($Vf1,[2,25]),o($Vf1,[2,26]),o($Vf1,[2,27]),{8:213,60:$Vy},{8:214,60:$Vy},o($Vz,$VA,{8:215,60:$Vy}),{41:[1,216],44:$VB},{60:[2,80]},{60:[2,81]},{60:[2,82]},{68:[1,217]},{68:[1,218]},{42:$VE,44:$VF,51:$VG,52:$VH},{42:$VJ},{42:$VL},{30:[1,219],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{60:[2,35]},{49:$VO,50:$VP,68:[1,220],82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},o([26,30,45,60,62,68,72,82],[2,95],{49:$VO,50:$VP,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),o($Vb1,[2,96],{49:$VO,50:$VP,85:$VS,86:$VT,87:$VU,88:$VV}),o($Vg1,[2,98],{49:$VO,50:$VP,87:$VU,88:$VV}),o($Vg1,[2,99],{49:$VO,50:$VP,87:$VU,88:$VV}),o($VY,[2,100]),o($VY,[2,101]),o($VY,[2,102]),o($VY,[2,103]),{30:[1,221],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},o($Vh1,[2,105],{92:$VZ,93:$V_,94:$V$,95:$V01}),o($Vh1,[2,106],{92:$VZ,93:$V_,94:$V$,95:$V01}),o($Vi1,[2,107],{95:$V01}),o($Vi1,[2,108],{95:$V01}),o($Vi1,[2,109],{95:$V01}),o($Vi1,[2,110],{95:$V01}),o($V11,[2,114]),{30:[1,222],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,223],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,224],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,225],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,226],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,227],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,228],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,229],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},o($Vj1,[2,45],{49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),{18:104,28:$V2,29:230,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{30:[1,231],62:$Vk1},{23:233,24:$VN},{41:[1,234]},{42:[1,235]},{46:[1,236]},o($V51,[2,52],{49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),{30:[1,237]},o($V11,[2,66]),{18:104,28:$V2,29:238,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($Vl1,[2,62]),{45:[1,239],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{30:[1,240],62:$Vk1},{23:241,24:$VN},{24:[1,242]},{23:243,24:$VN},{18:104,28:$V2,29:244,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($Ve1,[2,32]),o($Vf1,[2,20]),o($Vf1,[2,21]),o($Vf1,[2,22]),o($Vf1,[2,28]),o($Vf1,[2,29]),o($Vf1,[2,30]),o($Vj1,$V31,{42:$V21}),{18:104,28:$V2,29:245,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{18:104,28:$V2,29:246,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{60:[2,34]},{18:104,28:$V2,29:247,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{23:248,24:$VN},o($V11,[2,36]),o($V11,[2,37]),o($V11,[2,38]),o($V11,[2,39]),o($V11,[2,40]),o($V11,[2,41]),o($V11,[2,42]),o($V11,[2,43]),o($Vj1,[2,46],{49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),{23:249,24:$VN},{40:250,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($Vx,[2,71]),o($Vm1,[2,75]),{24:[1,252],46:[1,251]},{48:[1,253]},o([28,32,33,34,35,36,37,38,39,41,84,91,98,99,100,101,102,103],[2,50]),o($Vd1,[2,68],{49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV}),{45:[1,254]},{23:255,24:$VN},o($Vx,[2,73]),{78:256,79:257,80:[1,258],81:$Vn1},o($VM,[2,76]),{30:[1,260],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{49:$VO,50:$VP,68:[1,261],82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{49:$VO,50:$VP,68:[1,262],82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},{49:$VO,50:$VP,60:[2,83],82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},o($Ve1,[2,88]),o($Vx,[2,70]),{41:[1,263]},{40:264,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{18:104,28:$V2,29:130,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,47:265,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{49:[1,266]},o($Vl1,[2,63]),o($Vx,[2,72]),{26:[1,267],79:268,80:[1,269],81:$Vn1},{26:[1,270]},{68:[1,271]},{68:[1,272]},{8:273,60:$Vy},{9:274,41:$Va1,53:162,54:163},{9:275,41:$Va1,53:162,54:163},o($Vm1,[2,74]),{44:[1,276]},{26:[1,277],62:$Vc1},{40:278,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($VM,[2,89]),{26:[1,279]},{68:[1,280]},o($VM,[2,90]),{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,20:281,21:282,22:146,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,20:283,21:282,22:146,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($VM,[2,77]),{30:[1,284]},{30:[1,285]},{18:104,28:$V2,29:286,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$VX,53:102,54:103,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($Vj1,[2,48]),{50:[1,287]},o($VM,[2,91]),{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,20:288,21:282,22:146,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($Vo1,[2,93],{53:21,54:22,73:24,29:30,89:39,96:40,97:42,31:48,7:144,9:145,22:146,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,40:155,21:289,27:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$Vb,48:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,76:$Vn,77:$Vo,84:$Vp,91:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw}),o($Vf1,[2,19]),{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,21:289,22:146,26:[2,94],27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{24:[1,290]},{24:[1,291]},{45:[1,292],49:$VO,50:$VP,82:$VQ,83:$VR,85:$VS,86:$VT,87:$VU,88:$VV},o($Vj1,[2,49]),o($Vo1,[2,92],{53:21,54:22,73:24,29:30,89:39,96:40,97:42,31:48,7:144,9:145,22:146,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,40:155,21:289,27:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,41:$Vb,48:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,76:$Vn,77:$Vo,84:$Vp,91:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw}),o($Vf1,[2,18]),{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,20:293,21:282,22:146,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,20:294,21:282,22:146,27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($Vj1,[2,47]),{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,21:289,22:146,26:[1,295],27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},{7:144,9:145,11:147,12:148,13:149,14:150,15:151,16:152,17:153,18:154,21:289,22:146,26:[1,296],27:$V1,28:$V2,29:30,31:48,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,40:155,41:$Vb,48:$Vc,53:21,54:22,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,65:$Vk,66:$Vl,67:$Vm,69:$V71,70:$V81,71:$V91,73:24,76:$Vn,77:$Vo,84:$Vp,89:39,91:$Vq,96:40,97:42,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw},o($VM,[2,78]),o($VM,[2,79])],
defaultActions: {3:[2,2],59:[2,1],97:[2,65],156:[2,80],157:[2,81],158:[2,82],165:[2,35],219:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

   const Value = require('../clases/Value.js')
   const Type = require('../clases/Type.js')
   const Global = require('../clases/Global.js')
   const Print = require('../clases/Print.js')
   const Aritmetica = require('../clases/Aritmetica.js')
   var program = new Global()
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 51;
break;
case 4:return 90;
break;
case 5:return 52;
break;
case 6:return 91;
break;
case 7:return 92;
break;
case 8:return 93;
break;
case 9:return 95;
break;
case 10:return 94;
break;
case 11:return 85;
break;
case 12:return 42;
break;
case 13:return 86;
break;
case 14:return 84;
break;
case 15:return 87;
break;
case 16:return 88;
break;
case 17:return 49;
break;
case 18:return 50;
break;
case 19:return 72;
break;
case 20:return 68;
break;
case 21:return 60;
break;
case 22:return 83;
break;
case 23:return 82;
break;
case 24:return 28;
break;
case 25:return 30;
break;
case 26:return 24;
break;
case 27:return 26;
break;
case 28:return 62;
break;
case 29:return 95;
break;
case 30:return 44;
break;
case 31:return 45;
break;
case 32:return 55;
break;
case 33:return 57;
break;
case 34:return 'tbool';
break;
case 35:return 59;
break;
case 36:return 48;
break;
case 37:return 56;
break;
case 38:return 27;
break;
case 39:return 100;
break;
case 40:return 101;
break;
case 41:return 76;
break;
case 42:return 75;
break;
case 43:return 67;
break;
case 44:return 65;
break;
case 45:return 77;
break;
case 46:return 80;
break;
case 47:return 81;
break;
case 48:return 'has';
break;
case 49:return 61;
break;
case 50:return 64;
break;
case 51:return 69;
break;
case 52:return 46;
break;
case 53:return 71;
break;
case 54:return 70;
break;
case 55:return 32;
break;
case 56:return 33;
break;
case 57:return 34;
break;
case 58:return 35;
break;
case 59:return 36;
break;
case 60:return 37;
break;
case 61:return 38;
break;
case 62:return 39;
break;
case 63:return 103;
break;
case 64:return 102;  
break;
case 65:return 41;
break;
case 66:yy_.yytext = yy_.yytext.substring(1,yy_.yytext.length-1); return'cadena';
break;
case 67:yy_.yytext = yy_.yytext.substring(1,yy_.yytext.length-1);console.log(yy_.yytext); return'caracter';
break;
case 68:return 5;
break;
case 69:console.log('Error léxico: '+yy_.yytext+', en la línea: '+yy_.yylloc.first_line+'; columna: '+yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\^)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:list\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:exec\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:([0-9])+)/i,/^(?:([a-zA-Z_])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:[\']([^']|\\n|\\r|\\t)[\'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}